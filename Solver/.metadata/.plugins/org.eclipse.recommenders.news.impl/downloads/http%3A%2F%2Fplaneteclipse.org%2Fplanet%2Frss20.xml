<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Jens Reimann: Integrating Eclipse IoT</title>
	<guid isPermaLink="false">https://dentrassi.de/?p=4107</guid>
	<link>https://dentrassi.de/2019/02/20/integrating-eclipse-iot/</link>
	<description>&lt;p&gt;The Eclipse IoT project is a top level project at the Eclipse Foundation. It currently consists of around 40 projects, which focus on different aspects of IoT. This may either be complete solutions, like the &lt;a href=&quot;https://www.eclipse.org/smarthome/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse SmartHome&lt;/a&gt; project, the PLC runtime and IDE, &lt;a href=&quot;https://www.eclipse.org/4diac/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse 4DIAC&lt;/a&gt;. Or it may be building block projects, like the MQTT libraries of &lt;a href=&quot;https://www.eclipse.org/paho/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Paho&lt;/a&gt;, or the cloud scale IoT messaging infrastructure of &lt;a href=&quot;https://www.eclipse.org/hono/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt;. I can only encourage you to have a look at the &lt;a href=&quot;https://iot.eclipse.org/projects/&quot;&gt;list of projects&lt;/a&gt; and do a bit of exploring.&lt;/p&gt;



&lt;p&gt;And while it is great to a have a diverse set of projects, covering &lt;a href=&quot;https://iot.eclipse.org/white-papers/iot-architectures/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;the three tiers of IoT &lt;/a&gt;(Device, Gateway and Cloud), it can be a challenge to explain people, how all of those projects can create something, which is bigger than the individual projects. Because having 40 different IoT projects is great, but imagine the possibilities of having a whole IoT ecosystem of projects. Mixing and matching, building your IoT solution as you see fit.&lt;/p&gt;



&lt;span id=&quot;more-4107&quot;&gt;&lt;/span&gt;



&lt;h3&gt;IoT means different things to different people&lt;/h3&gt;



&lt;p&gt;Everyone sees something different in the “Internet of Things”. Looking at the introduction on Wikipedia, you may understand why:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;The Internet of things (IoT) is the network of devices such as vehicles, and home appliances that contain electronics, software, sensors, actuators, and connectivity which allows these things to connect, interact and exchange data&lt;/p&gt;&lt;cite&gt;Wikipedia – “Internet of Things”&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;While it is absolutely valid, it is also rather vague and covers quite a few use cases. This is also being reflected by the different projects of Eclipse IoT. Different projects cover different areas, sometimes they overlap, but sometimes they don’t. Sometimes to follow similar principles, and sometimes they don’t. Most people are caught up in their daily work, contributing to the projects you focus on. But it might be beneficial for everyone, to look a bit over the fence and try to establish a common ground, creating a more integrated Eclipse IoT experience&lt;/p&gt;



&lt;h3&gt;Let’s draw a map&lt;/h3&gt;



&lt;p&gt;One of the biggest problems, and not only when you are a newcomer to Eclipse IoT, is to understand what is already there, and how it works together. Because, yes it does work together! Finding out “how” can however be challenging. Many projects already have some kind of documentation on how to set up project X with project Y. In most cases such information stored in the project’s Git repository, some blog post or only lives in a forum or mailing list.&lt;/p&gt;



&lt;p&gt;So we tried to find a format on how to bring this all together, and also motivate projects to actively contribute to that format. A single person cannot know and understand how all those different projects work together, but the committers on each project know their projects and existing integration points best. And they can also easily point you to the necessary documentation. The result, that resonated quite well with people is a simple, interactive map of the integrated projects:&lt;/p&gt;



&lt;figure class=&quot;wp-block-image is-resized&quot;&gt;&lt;a href=&quot;https://ctron.github.io/eclipse-iot-integration-map/&quot; rel=&quot;&quot; target=&quot;_blank&quot;&gt;&lt;img alt=&quot;&quot; class=&quot;wp-image-4121&quot; height=&quot;647&quot; src=&quot;https://dentrassi.de/wp-content/uploads/Selection_583.png&quot; width=&quot;824&quot; /&gt;&lt;/a&gt;Eclipse IoT integration map – &lt;a href=&quot;https://ctron.github.io/eclipse-iot-integration-map/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;https://ctron.github.io/eclipse-iot-integration-map/&lt;/a&gt;&lt;/figure&gt;



&lt;p&gt;This map represents a condensed view on the current state of &lt;a href=&quot;https://ctron.github.io/eclipse-iot-integration-map/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse IoT integration&lt;/a&gt;, to the best of my knowledge. But please fix that latter part, by using the “&lt;a href=&quot;https://github.com/ctron/eclipse-iot-integration-map&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Fork me!&lt;/a&gt;” button. Adding a new project to that map is only one pull request away. And if you are new to Eclipse IoT, then go ahead and explore the map.&lt;/p&gt;



&lt;h3&gt;Get started quickly&lt;/h3&gt;



&lt;p&gt;Getting started still is hard. Yes, most projects do have some kind of “quick start” tutorial, which gets you started within a few minutes. However, the more components and projects you add, the more complex and time consuming it gets. Mostly because you need to figure out the integration part yourself:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote&quot;&gt;&lt;p&gt;Getting us started with Eclipse IoT took us four months. On the other hand we don’t want to reinvent the wheel, especially when it comes to a complex piece of infrastructure like an IoT platform. Our target market requires being able to run on-premise, ruling out the majority of IoT platforms offered in the cloud. Using and actively participating in an open source IoT platform and exposing open API’s to our customers for integrating the IoT platform aligns perfectly with our vision.&lt;/p&gt;&lt;cite&gt;Bob Claerhout – &lt;a href=&quot;http://www.aloxy.io/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Aloxy&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;I was really glad that I joined the &lt;a href=&quot;https://wiki.eclipse.org/IoT/M2MIWG/Weekly_call_minutes&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;bi-weekly Eclipse IoT community call&lt;/a&gt; that day. Because hearing that feedback, from someone who just started to look into the ecosystem, confirmed two things: Eclipse IoT can be a pretty valuable asset for the IoT solution you are building. But I think we should make it way easier to consume those projects, or at least to get people started quicker. Just a little bit later, a first, small PR from Bob landed in the Eclipse Hono project, proving that the open source approach works just fine.&lt;/p&gt;



&lt;p&gt;But not everyone is that persistent and keeps trying that hard. What we need is good starting point, a super-opinionated deployment. Showing the basics of each of the projects, in some kind of integrated deployment. You will never take this out into production, but it should help you to get started, and allow you to explore what is already there. See how it works, let you play around with a running instance of the components you chose to deploy.&lt;/p&gt;



&lt;h3&gt;We are close&lt;/h3&gt;



&lt;p&gt;And actually we are pretty close to that target. It just needs a bit of polish, and we have a nice starting point. Over the last year or so, we have built a kind of “example”, “demo setup”, whatever you will call it. It all started with a simple deployment of Eclipe Hono, including an IoT gateway simulator and a “Demo Gauge”, which acts as a web frontend, showing the simulated data in a web browser.&lt;/p&gt;



&lt;p&gt;Over the time we extended this and now have an example of telemetry data ingestion, using &lt;a href=&quot;https://www.eclipse.org/kura/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Kura&lt;/a&gt; as an IoT gateway, connecting to &lt;a href=&quot;https://eclipse.org/hono/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt; and &lt;a href=&quot;http://enmasse.io/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt; as the IoT messaging layer. Pushing data via &lt;a href=&quot;https://camel.apache.org/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Apache Camel&lt;/a&gt; to &lt;a href=&quot;https://kafka.apache.org/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Apache Kafka&lt;/a&gt;, and then running the “&lt;a href=&quot;https://github.com/ctron/hono-example-demo-gauge&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Demo Gauge&lt;/a&gt;” application to show the data. Alongside we deploy &lt;a href=&quot;https://www.eclipse.org/che/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Che&lt;/a&gt;, to show how you can start developing on the same cloud infrastructure that the IoT stack is deployed to. All of that is running on Kubernetes based &lt;a href=&quot;https://www.okd.io/&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;OKD&lt;/a&gt;, using a source-to-image, devops style deployment model.&lt;/p&gt;



&lt;p&gt;Like the integration map, it is right here on GitHub: &lt;a href=&quot;https://github.com/redhat-iot/iot-cloud-stack-ece2018&quot;&gt;https://github.com/redhat-iot/iot-cloud-stack-ece2018&lt;/a&gt;. A hand full of people already contributes to that effort over time. But, compared to the integration map, this “Tutorial” repository needs a bit of cleanup. And instead of running through it sequentially, it might be better to approach this from a feature based perspective. Deploying a core infrastructure, and then allowing for a few choices, of what you would like to deploy in addition.&lt;/p&gt;



&lt;h3&gt;Gathering recipes&lt;/h3&gt;



&lt;p&gt;So let’s simply start with a fresh repository. Name it “&lt;a href=&quot;https://github.com/ctron/eclipse-iot-recipes&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;Eclipse IoT recipes&lt;/a&gt;“, for the time being, and re-organize the content a little bit: &lt;a href=&quot;https://github.com/ctron/eclipse-iot-recipes&quot; rel=&quot;noreferrer noopener&quot; target=&quot;_blank&quot;&gt;https://github.com/ctron/eclipse-iot-recipes&lt;/a&gt; … that wasn’t too difficult &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s.w.org/images/core/emoji/11/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;



&lt;p&gt;The goal should be, that within a few hours, you have a system up and running. A system which allows you to play at least with the basics. And everyone who would like to add something, can easily do that with a PR. And “adding” might also be to provide an alternative path. Replace the IoT gateway, replace the messaging layer, … whatever you have in mind.&lt;/p&gt;



&lt;p&gt;I still think it is helpful to have some manual steps, with a little bit of explanation, rather than a fully automated script. From my experience, you learn a lot more when you do things yourself, rather than watching a script doing things for you.&lt;/p&gt;



&lt;h3&gt;Play with it … and contribute!&lt;/h3&gt;



&lt;p&gt;Now it is up to you, to test this, play with it, and contribute. Provide feedback, make suggestions, or fork it and turn it upside down.&lt;/p&gt;



&lt;p&gt;Or just explore what Eclipse IoT has to offer.&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://dentrassi.de/2019/02/20/integrating-eclipse-iot/&quot; rel=&quot;nofollow&quot;&gt;Integrating Eclipse IoT&lt;/a&gt; appeared first on &lt;a href=&quot;https://dentrassi.de&quot; rel=&quot;nofollow&quot;&gt;ctron's blog&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Wed, 20 Feb 2019 12:28:51 +0000</pubDate>
</item>
<item>
	<title>InfoQ Eclipse feed: Eclipse Releases GlassFish 5.1 Certified as Compatible with Java EE 8</title>
	<guid isPermaLink="true">https://www.infoq.com/news/2019/02/eclipse-releases-glassfish-5.1?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>https://www.infoq.com/news/2019/02/eclipse-releases-glassfish-5.1?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;https://www.infoq.com/styles/i/logo_bigger.jpg&quot; /&gt;&lt;p&gt;Eclipse has achieved another GlassFish milestone with the anticipated GA release of version 5.1. A year in the making, this milestone included previous GlassFish milestones such as the full migration of source code and open-sourcing the Java EE TCK (September 2018), the RC1 release of GlassFish 5.1 (October 2018), and the integration of EclipseLink and Eclipse Jersey in GlassFish (December 2018).&lt;/p&gt; &lt;i&gt;By Michael Redlich&lt;/i&gt;</description>
	<pubDate>Tue, 19 Feb 2019 09:00:00 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: As a matter of Factory — Part 3 (Method Chaining)</title>
	<guid isPermaLink="false">https://medium.com/p/224217074d31</guid>
	<link>https://medium.com/@donraab/as-a-matter-of-factory-part-3-method-chaining-224217074d31?source=rss-df39b86e9f04------2</link>
	<description>&lt;h3&gt;As a matter of Factory — Part 3 (Method Chaining)&lt;/h3&gt;&lt;p&gt;Learn how to add or remove elements from Java collections fluently by leveraging a few lesser known APIs in &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*4L89DAN4fMUKpj8TdwLV7Q.jpeg&quot; /&gt;Let’s take a look under the hood at some lesser known APIs in Eclipse Collections.&lt;/figure&gt;&lt;h3&gt;Static Factories&lt;/h3&gt;&lt;p&gt;In the &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-1-mutable-75cc2c5d72d9&quot;&gt;first&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@donraab/as-a-matter-of-factory-part-2-immutable-8cb72ff897ee&quot;&gt;second&lt;/a&gt; installment of the “As a matter of Factory” blog series, I described how to use the methods available on the &lt;em&gt;Lists&lt;/em&gt;, &lt;em&gt;Sets&lt;/em&gt;, and &lt;em&gt;Maps&lt;/em&gt; classes to create and initialize mutable and immutable collections. For example, there are static instances of &lt;em&gt;MutableListFactory&lt;/em&gt; and &lt;em&gt;ImmutableListFactory&lt;/em&gt; on the Lists class, stored in the public static final variables named &lt;em&gt;mutable&lt;/em&gt; and &lt;em&gt;immutable&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;MutableList&amp;lt;String&amp;gt; list = &lt;br /&gt;    Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);&lt;/pre&gt;&lt;pre&gt;ImmutableList&amp;lt;String&amp;gt; list = &lt;br /&gt;    Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&quot;1&quot;, &quot;2&quot;, &quot;3&quot;);&lt;/pre&gt;&lt;p&gt;The method &lt;em&gt;with&lt;/em&gt; is overloaded on the &lt;em&gt;MutableListFactory&lt;/em&gt; class. One version of the &lt;em&gt;with&lt;/em&gt; method takes no parameters, and returns an empty &lt;em&gt;MutableList&lt;/em&gt;. The other version of the method takes a &lt;em&gt;varargs&lt;/em&gt; parameter which will construct a &lt;em&gt;MutableList&lt;/em&gt; with the parameters specified.&lt;/p&gt;&lt;h3&gt;Fluent Mutable Interfaces&lt;/h3&gt;&lt;p&gt;The static factory methods are not the only way you can initialize a &lt;em&gt;List&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt;, &lt;em&gt;Bag&lt;/em&gt; or &lt;em&gt;Map&lt;/em&gt;. There are methods available directly on the mutable interfaces that can be used to mutate collections fluently. Each method will mutate the underlying collection by adding or removing an element and then returning the same collection.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*hxgYPl7zUiZAhysHAw4dKQ.png&quot; /&gt;Fluent methods available on Mutable interfaces for mutating collections&lt;/figure&gt;&lt;h4&gt;Equivalent Methods from JDK interfaces&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;with -&amp;gt; add&lt;/li&gt;&lt;li&gt;without -&amp;gt; remove&lt;/li&gt;&lt;li&gt;withAll -&amp;gt; addAll&lt;/li&gt;&lt;li&gt;withoutAll -&amp;gt; removeAll&lt;/li&gt;&lt;li&gt;withKeyValue -&amp;gt; put&lt;/li&gt;&lt;li&gt;withoutKey -&amp;gt; removeKey&lt;/li&gt;&lt;/ul&gt;&lt;h3&gt;Fluently building Maps&lt;/h3&gt;&lt;p&gt;The &lt;em&gt;with&lt;/em&gt; method on &lt;em&gt;MutableListFactory&lt;/em&gt; can construct a &lt;em&gt;MutableList&lt;/em&gt; with a variable number of items, but the same is not true for &lt;em&gt;MutableMapFactory&lt;/em&gt;. The &lt;em&gt;with&lt;/em&gt; method on &lt;em&gt;MutableMapFactory&lt;/em&gt; is overloaded five times.&lt;/p&gt;&lt;pre&gt;&amp;lt;K, V&amp;gt; MutableMap&amp;lt;K, V&amp;gt; with();&lt;/pre&gt;&lt;pre&gt;&amp;lt;K, V&amp;gt; MutableMap&amp;lt;K, V&amp;gt; with(K key, V value);&lt;/pre&gt;&lt;pre&gt;&amp;lt;K, V&amp;gt; MutableMap&amp;lt;K, V&amp;gt; with(K key1, V value1, K key2, V value2);&lt;/pre&gt;&lt;pre&gt;&amp;lt;K, V&amp;gt; MutableMap&amp;lt;K, V&amp;gt; with(K key1, V value1, K key2, V value2, K key3, V value3);&lt;/pre&gt;&lt;pre&gt;&amp;lt;K, V&amp;gt; MutableMap&amp;lt;K, V&amp;gt; with(K key1, V value1, K key2, V value2, K key3, V value3, K key4, V value4);&lt;/pre&gt;&lt;p&gt;You can only use the &lt;em&gt;with&lt;/em&gt; method method to create a &lt;em&gt;MutableMap&lt;/em&gt; with up to four keys and values.&lt;/p&gt;&lt;pre&gt;MutableMap&amp;lt;Integer, String&amp;gt; map =&lt;br /&gt;        Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;br /&gt;                1, &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;,&lt;br /&gt;                2, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;,&lt;br /&gt;                3, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;,&lt;br /&gt;                4, &lt;strong&gt;&quot;Four&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;h4&gt;What do you do if you need more than four keys and values?&lt;/h4&gt;&lt;p&gt;There is a method named &lt;em&gt;withKeyValue&lt;/em&gt; on &lt;em&gt;MutableMap&lt;/em&gt; which can be used to fluently add an unlimited number of key and value pairs by leveraging method chaining.&lt;/p&gt;&lt;h4&gt;Fluently building a MutableMap using withKeyValue&lt;/h4&gt;&lt;pre&gt;MutableMap&amp;lt;Integer, String&amp;gt; numbers =&lt;br /&gt;        Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.&amp;lt;Integer, String&amp;gt;empty()&lt;br /&gt;                .withKeyValue(0, &lt;strong&gt;&quot;Zero&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(1, &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(2, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(3, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(4, &lt;strong&gt;&quot;Four&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(5, &lt;strong&gt;&quot;Five&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(6, &lt;strong&gt;&quot;Six&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(7, &lt;strong&gt;&quot;Seven&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(8, &lt;strong&gt;&quot;Eight&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(9, &lt;strong&gt;&quot;Nine&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(10, &lt;strong&gt;&quot;Ten&quot;&lt;/strong&gt;);&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Zero&quot;&lt;/strong&gt;, numbers.get(0));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, numbers.get(1));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Ten&quot;&lt;/strong&gt;, numbers.get(10));&lt;/pre&gt;&lt;h4&gt;The withKeyValue method&lt;/h4&gt;&lt;pre&gt;public MutableMap&amp;lt;K, V&amp;gt; withKeyValue(K key, V value)&lt;br /&gt;{&lt;br /&gt;    this.put(key, value);&lt;br /&gt;    return this;&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Fluently building an ImmutableMap&lt;/h4&gt;&lt;pre&gt;ImmutableMap&amp;lt;Integer, String&amp;gt; numbers =&lt;br /&gt;        Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.&amp;lt;Integer, String&amp;gt;empty()&lt;br /&gt;                .withKeyValue(0, &lt;strong&gt;&quot;Zero&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(1, &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(2, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(3, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(4, &lt;strong&gt;&quot;Four&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(5, &lt;strong&gt;&quot;Five&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(6, &lt;strong&gt;&quot;Six&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(7, &lt;strong&gt;&quot;Seven&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(8, &lt;strong&gt;&quot;Eight&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(9, &lt;strong&gt;&quot;Nine&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(10, &lt;strong&gt;&quot;Ten&quot;&lt;/strong&gt;)&lt;br /&gt;                .toImmutable();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Zero&quot;&lt;/strong&gt;, numbers.get(0));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, numbers.get(1));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Ten&quot;&lt;/strong&gt;, numbers.get(10));&lt;/pre&gt;&lt;h4&gt;Fluently building an Immutable object / primitive Map&lt;/h4&gt;&lt;pre&gt;ObjectIntMap&amp;lt;String&amp;gt; numbers =&lt;br /&gt;        ObjectIntMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.&amp;lt;String&amp;gt;empty()&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Zero&quot;&lt;/strong&gt;, 0)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, 1)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;, 2)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;, 3)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Four&quot;&lt;/strong&gt;, 4)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Five&quot;&lt;/strong&gt;, 5)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Six&quot;&lt;/strong&gt;, 6)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Seven&quot;&lt;/strong&gt;, 7)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Eight&quot;&lt;/strong&gt;, 8)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Nine&quot;&lt;/strong&gt;, 9)&lt;br /&gt;                .withKeyValue(&lt;strong&gt;&quot;Ten&quot;&lt;/strong&gt;, 10)&lt;br /&gt;                .toImmutable();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(0, numbers.get(&lt;strong&gt;&quot;Zero&quot;&lt;/strong&gt;));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(1, numbers.get(&lt;strong&gt;&quot;One&quot;&lt;/strong&gt;));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(10, numbers.get(&lt;strong&gt;&quot;Ten&quot;&lt;/strong&gt;));&lt;/pre&gt;&lt;h4&gt;Fluently building an Immutable primitive / object Map&lt;/h4&gt;&lt;pre&gt;IntObjectMap&amp;lt;String&amp;gt; numbers =&lt;br /&gt;        IntObjectMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.&amp;lt;String&amp;gt;empty()&lt;br /&gt;                .withKeyValue(0, &lt;strong&gt;&quot;Zero&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(1, &lt;strong&gt;&quot;One&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(2, &lt;strong&gt;&quot;Two&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(3, &lt;strong&gt;&quot;Three&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(4, &lt;strong&gt;&quot;Four&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(5, &lt;strong&gt;&quot;Five&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(6, &lt;strong&gt;&quot;Six&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(7, &lt;strong&gt;&quot;Seven&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(8, &lt;strong&gt;&quot;Eight&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(9, &lt;strong&gt;&quot;Nine&quot;&lt;/strong&gt;)&lt;br /&gt;                .withKeyValue(10, &lt;strong&gt;&quot;Ten&quot;&lt;/strong&gt;)&lt;br /&gt;                .toImmutable();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Zero&quot;&lt;/strong&gt;, numbers.get(0));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;One&quot;&lt;/strong&gt;, numbers.get(1));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;&quot;Ten&quot;&lt;/strong&gt;, numbers.get(10));&lt;/pre&gt;&lt;h4&gt;Fluently building an Immutable primitive / primitive Map&lt;/h4&gt;&lt;pre&gt;IntCharMap numbers = IntCharMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.empty()&lt;br /&gt;        .withKeyValue(0, &lt;strong&gt;'0'&lt;/strong&gt;)&lt;br /&gt;        .withKeyValue(1, &lt;strong&gt;'1'&lt;/strong&gt;)&lt;br /&gt;        .withKeyValue(2, &lt;strong&gt;'2'&lt;/strong&gt;)&lt;br /&gt;        .withKeyValue(3, &lt;strong&gt;'3'&lt;/strong&gt;)&lt;br /&gt;        .withKeyValue(4, &lt;strong&gt;'4'&lt;/strong&gt;)&lt;br /&gt;        .withKeyValue(5, &lt;strong&gt;'5'&lt;/strong&gt;)&lt;br /&gt;        .withKeyValue(6, &lt;strong&gt;'6'&lt;/strong&gt;)&lt;br /&gt;        .withKeyValue(7, &lt;strong&gt;'7'&lt;/strong&gt;)&lt;br /&gt;        .withKeyValue(8, &lt;strong&gt;'8'&lt;/strong&gt;)&lt;br /&gt;        .withKeyValue(9, &lt;strong&gt;'9'&lt;/strong&gt;)&lt;br /&gt;        .toImmutable();&lt;/pre&gt;&lt;pre&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;'0'&lt;/strong&gt;, numbers.get(0));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;'1'&lt;/strong&gt;, numbers.get(1));&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;strong&gt;'9'&lt;/strong&gt;, numbers.get(9));&lt;/pre&gt;&lt;h3&gt;Fluently building Lists, Sets and Bags&lt;/h3&gt;&lt;p&gt;Fluently building a &lt;em&gt;Map&lt;/em&gt; using method chaining is often more useful than fluently building a &lt;em&gt;List&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt;, or &lt;em&gt;Bag&lt;/em&gt;. Still the functionality exists if and when you need it.&lt;/p&gt;&lt;h4&gt;Fluently building a List&lt;/h4&gt;&lt;pre&gt;ImmutableList&amp;lt;Integer&amp;gt; numbers =&lt;br /&gt;        Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1)&lt;br /&gt;                .with(2)&lt;br /&gt;                .with(3)&lt;br /&gt;                .with(4)&lt;br /&gt;                .withAll(Interval.&lt;em&gt;fromTo&lt;/em&gt;(5, 10))&lt;br /&gt;                .toImmutable();&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Interval.&lt;em&gt;oneTo&lt;/em&gt;(10), numbers);&lt;/pre&gt;&lt;p&gt;Notice that I used two methods to fluently build the &lt;em&gt;MutableList&lt;/em&gt;. The method &lt;em&gt;with&lt;/em&gt; takes a single argument and the method &lt;em&gt;withAll&lt;/em&gt; takes an &lt;em&gt;Iterable&lt;/em&gt;.&lt;/p&gt;&lt;h4&gt;The with method&lt;/h4&gt;&lt;pre&gt;public MutableList&amp;lt;T&amp;gt; with(T element)&lt;br /&gt;{&lt;br /&gt;    this.add(element);&lt;br /&gt;    return this;&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;The withAll method&lt;/h4&gt;&lt;pre&gt;public MutableList&amp;lt;T&amp;gt; withAll(Iterable&amp;lt;? extends T&amp;gt; elements)&lt;br /&gt;{&lt;br /&gt;    this.addAllIterable(elements);&lt;br /&gt;    return this;&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Fluently building a Set&lt;/h4&gt;&lt;pre&gt;ImmutableSet&amp;lt;Integer&amp;gt; numbers =&lt;br /&gt;        Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1)&lt;br /&gt;                .with(2)&lt;br /&gt;                .with(3)&lt;br /&gt;                .with(4)&lt;br /&gt;                .withAll(Interval.&lt;em&gt;fromTo&lt;/em&gt;(5, 10))&lt;br /&gt;                .toImmutable();&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Interval.&lt;em&gt;oneTo&lt;/em&gt;(10).toSet(), numbers);&lt;/pre&gt;&lt;h4&gt;Fluently building a Bag&lt;/h4&gt;&lt;pre&gt;ImmutableBag&amp;lt;Integer&amp;gt; numbers =&lt;br /&gt;        Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1)&lt;br /&gt;                .with(2)&lt;br /&gt;                .with(3)&lt;br /&gt;                .with(4)&lt;br /&gt;                .withAll(Interval.&lt;em&gt;fromTo&lt;/em&gt;(5, 10))&lt;br /&gt;                .toImmutable();&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Interval.&lt;em&gt;oneTo&lt;/em&gt;(10).toBag(), numbers);&lt;/pre&gt;&lt;h4&gt;Fluently building primitive Lists, Sets and Bags&lt;/h4&gt;&lt;pre&gt;ImmutableIntList list =&lt;br /&gt;        IntLists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1)&lt;br /&gt;                .with(2)&lt;br /&gt;                .with(3)&lt;br /&gt;                .with(4)&lt;br /&gt;                .withAll(IntInterval.&lt;em&gt;fromTo&lt;/em&gt;(5, 10))&lt;br /&gt;                .toImmutable();&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(IntInterval.&lt;em&gt;oneTo&lt;/em&gt;(10), list);&lt;/pre&gt;&lt;pre&gt;ImmutableIntSet set =&lt;br /&gt;        IntSets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1)&lt;br /&gt;                .with(2)&lt;br /&gt;                .with(3)&lt;br /&gt;                .with(4)&lt;br /&gt;                .withAll(IntInterval.&lt;em&gt;fromTo&lt;/em&gt;(5, 10))&lt;br /&gt;                .toImmutable();&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(IntInterval.&lt;em&gt;oneTo&lt;/em&gt;(10).toSet(), set);&lt;/pre&gt;&lt;pre&gt;ImmutableIntBag bag =&lt;br /&gt;        IntBags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1)&lt;br /&gt;                .with(2)&lt;br /&gt;                .with(3)&lt;br /&gt;                .with(4)&lt;br /&gt;                .withAll(IntInterval.&lt;em&gt;fromTo&lt;/em&gt;(5, 10))&lt;br /&gt;                .toImmutable();&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(IntInterval.&lt;em&gt;oneTo&lt;/em&gt;(10).toBag(), bag);&lt;/pre&gt;&lt;h3&gt;Using withAll in Collectors2&lt;/h3&gt;&lt;p&gt;The &lt;em&gt;withAll&lt;/em&gt; method is very useful for building Collectors which return collections. The &lt;em&gt;withAll&lt;/em&gt; method is used repeatedly as a method reference in the &lt;em&gt;Collectors2&lt;/em&gt; class of Eclipse Collections.&lt;/p&gt;&lt;h4&gt;Collectors2.toList()&lt;/h4&gt;&lt;pre&gt;public static &amp;lt;T&amp;gt; Collector&amp;lt;T, ?, MutableList&amp;lt;T&amp;gt;&amp;gt; toList()&lt;br /&gt;{&lt;br /&gt;    return Collector.&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty,&lt;br /&gt;            MutableList::add,&lt;br /&gt;            MutableList::withAll,&lt;br /&gt;            &lt;strong&gt;&lt;em&gt;EMPTY_CHARACTERISTICS&lt;/em&gt;&lt;/strong&gt;);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Collectors2.toImmutableList()&lt;/h4&gt;&lt;pre&gt;public static &amp;lt;T&amp;gt; Collector&amp;lt;T, ?, ImmutableList&amp;lt;T&amp;gt;&amp;gt; toImmutableList()&lt;br /&gt;{&lt;br /&gt;    return Collector.&amp;lt;T, MutableList&amp;lt;T&amp;gt;, ImmutableList&amp;lt;T&amp;gt;&amp;gt;&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty,&lt;br /&gt;            MutableList::add,&lt;br /&gt;            MutableList::withAll,&lt;br /&gt;            MutableList::toImmutable,&lt;br /&gt;            &lt;strong&gt;&lt;em&gt;EMPTY_CHARACTERISTICS&lt;/em&gt;&lt;/strong&gt;);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Collectors2.countBy(Function)&lt;/h4&gt;&lt;pre&gt;public static &amp;lt;T, K&amp;gt; Collector&amp;lt;T, ?, MutableBag&amp;lt;K&amp;gt;&amp;gt; countBy(Function&amp;lt;? super T, ? extends K&amp;gt; function)&lt;br /&gt;{&lt;br /&gt;    return Collector.&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty,&lt;br /&gt;            (bag, each) -&amp;gt; bag.with(&lt;em&gt;function&lt;/em&gt;.valueOf(each)),&lt;br /&gt;            MutableBag::withAll,&lt;br /&gt;            &lt;strong&gt;&lt;em&gt;EMPTY_CHARACTERISTICS&lt;/em&gt;&lt;/strong&gt;);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;With or Without&lt;/h3&gt;&lt;p&gt;We like to provide good symmetry in Eclipse Collections. If you can fluently add items to a collection, then it would make sense to be be able to remove items from a collection fluently.&lt;/p&gt;&lt;h4&gt;The without method on UnifiedSet&lt;/h4&gt;&lt;pre&gt;public UnifiedSet&amp;lt;T&amp;gt; without(T element)&lt;br /&gt;{&lt;br /&gt;    this.remove(element);&lt;br /&gt;    return this;&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Here’s an example combining some of the fluent aspects of the Eclipse Collections factories.&lt;/p&gt;&lt;pre&gt;ImmutableSet&amp;lt;String&amp;gt; strings =&lt;br /&gt;        Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;or&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;without&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;you&quot;&lt;/strong&gt;)&lt;br /&gt;                .with(&lt;strong&gt;&quot;or&quot;&lt;/strong&gt;)&lt;br /&gt;                .without(&lt;strong&gt;&quot;you&quot;&lt;/strong&gt;)&lt;br /&gt;                .toImmutable();&lt;br /&gt;Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;or&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;without&quot;&lt;/strong&gt;), strings);&lt;/pre&gt;&lt;h3&gt;Final Thoughts&lt;/h3&gt;&lt;p&gt;Hopefully you found the information and examples in this blog useful. This blog was inspired by a recent &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/pull/699&quot;&gt;pull request&lt;/a&gt; submitted to Eclipse Collections. There are a lot of hidden gems inside of Eclipse Collections. I like to write about them when it becomes clear they are not so easily discovered.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=224217074d31&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 19 Feb 2019 03:52:43 +0000</pubDate>
</item>
<item>
	<title>InfoQ Eclipse feed: Presentation: Getting Super Productive with Spring Tools 4 and Spring Boot 2</title>
	<guid isPermaLink="true">https://www.infoq.com/presentations/spring-tools-5-boot-2?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</guid>
	<link>https://www.infoq.com/presentations/spring-tools-5-boot-2?utm_campaign=infoq_content&amp;utm_source=infoq&amp;utm_medium=feed&amp;utm_term=Eclipse</link>
	<description>&lt;img src=&quot;https://res.infoq.com/presentations/spring-tools-5-boot-2/en/headerimage/Alexbig-1550020694881.JPG&quot; /&gt;&lt;p&gt;Alex Boyko and Martin Lippert show how to use the Spring Tools 4 in Eclipse and Visual Studio Code when working on Spring Boot 2 applications.&lt;/p&gt; &lt;i&gt;By Alex Boyko, Martin Lippert&lt;/i&gt;</description>
	<pubDate>Wed, 13 Feb 2019 04:14:00 +0000</pubDate>
</item>
<item>
	<title>EclipseCon Europe 2018: Save the dates for 2019!</title>
	<guid isPermaLink="false">https://www.eclipsecon.org/news/1772 at https://www.eclipsecon.org</guid>
	<link>https://www.eclipsecon.org/europe2018/news/save-dates-2019</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Mark you calendar for the next edition of EclipseCon Europe / OSGi Community Event.&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 12 Feb 2019 17:07:22 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Participate in the 2019 IoT Developer Survey!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/PQGqQX0ryoE/participate-2019-iot-developer-survey</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/PQGqQX0ryoE/participate-2019-iot-developer-survey</link>
	<description>The Eclipse IoT Working Group is pleased to launch the 2019 IoT Developer Survey and we want to hear from you!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/PQGqQX0ryoE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 11 Feb 2019 15:10:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - Editorial Calendar 2019</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/1RRW9PiTAHE/eclipse-newsletter-%E2%80%94-editorial-calendar-2019</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/1RRW9PiTAHE/eclipse-newsletter-%E2%80%94-editorial-calendar-2019</link>
	<description>Our goal with the newsletter is to deliver great content that educates, motivates, and inspires our community!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/1RRW9PiTAHE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 11 Feb 2019 15:10:00 +0000</pubDate>
</item>
<item>
	<title>Thabang Mashologu: Participate in the 2019 IoT Developer Survey!</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6670 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/thabang-mashologu/participate-2019-iot-developer-survey</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;The &lt;a href=&quot;http://iot.eclipse.org/&quot;&gt;Eclipse IoT&lt;/a&gt; Working Group is pleased to launch the &lt;a href=&quot;https://www.surveymonkey.com/r/IoThabang&quot;&gt;2019 IoT Developer Survey&lt;/a&gt;. If you are involved in developing Internet of Things solutions and services, we want to hear from you!&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The purpose of the survey is to gain a better understanding of the requirements, priorities, and perceptions of IoT developer communities. This time around, responses will be collected until March 8, 2019, and the results will be published in early April.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Now in its fifth year, the survey has proven to be an influential assessment of the IoT market as viewed from the development front lines. The results from recent years (&lt;a href=&quot;https://www.slideshare.net/Eclipse-IoT/iot-developer-survey-2018-130998751&quot;&gt;2018&lt;/a&gt;, &lt;a href=&quot;https://www.slideshare.net/Eclipse-IoT/iot-developer-survey-2017-130998641&quot;&gt;2017&lt;/a&gt;, and &lt;a href=&quot;https://www.slideshare.net/Eclipse-IoT/iot-developer-survey-2016-report&quot;&gt;2016&lt;/a&gt;) have provided interesting insights into the key opportunities and challenges for developers building IoT solutions.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Please take the time to complete this short survey! Thank you in advance for your participation!&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;→ &lt;a href=&quot;https://www.surveymonkey.com/r/IoThabang&quot;&gt;Take the survey now&lt;/a&gt; ←&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://blogs.eclipse.org/www.surveymonkey.com/r/IoThabang&quot;&gt;&lt;img src=&quot;https://lh3.googleusercontent.com/kxgBf1fz6GC262mTk6k2bGkEIq-jf2mK7JtQ38laXJEdFEGmI6TUs63H0xHPIXI26aJovbQsHbXDFTWOtUbQgUL9OagVSI8kDyn0WxYfAelYxOLYCGkJOM20xfUZNSyMKw4LvMj8&quot; style=&quot;height: 312px; width: 624px;&quot; /&gt;&lt;/a&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/eclipse-iot&quot;&gt;eclipse-iot&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/iot&quot;&gt;IoT&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/iot-developer-survey-2019&quot;&gt;iot-developer-survey-2019&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/community&quot;&gt;Community&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 11 Feb 2019 10:48:22 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Open Source: Can you afford not to get involved?</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/a_D3H4Cw-dM/open-source-can-you-afford-not-get-involved</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/a_D3H4Cw-dM/open-source-can-you-afford-not-get-involved</link>
	<description>To say that the open source community is on a roll would be an understatement.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/a_D3H4Cw-dM&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 07 Feb 2019 13:30:00 +0000</pubDate>
</item>
<item>
	<title>Thabang Mashologu: Open Source: Can you afford not to get involved?</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6668 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/thabang-mashologu/open-source-can-you-afford-not-get-involved</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p&gt;Recently, the streaming data analytics startup Confluent announced that it had closed a $125 million Series D funding round. With the company’s value pegged at $2.5 billion, Confluent became the latest open source “unicorn.”&lt;/p&gt;

&lt;p&gt;To say that the open source community is on a roll would be an understatement.&lt;/p&gt;

&lt;p&gt;In 2018, &lt;a href=&quot;https://medium.com/memory-leak/2018-the-biggest-year-for-open-source-software-ever-part-deux-8d1b33fe47e4&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;open source M&amp;amp;A activity&lt;/a&gt; totaled an unprecedented $47 billion. IBM’s purchase of Red Hat, valued at a whopping $35 billion, went down as the largest software acquisition deal in history. While the IBM-Red Hat deal garnered most of the attention, some of the other acquisitions in the open source space were no less significant in terms of their deal sizes, and more importantly, the players involved.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Disclosure: Both IBM and Red Hat are strategic members of the &lt;/em&gt;&lt;em&gt;&lt;a href=&quot;https://www.eclipse.org/membership/exploreMembership.php&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Foundation&lt;/a&gt; &lt;/em&gt;&lt;em&gt;where I work.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Beyond catalyzing new venture creation and growth, open source is at the heart of the digital economy. IBM, Adobe, Salesforce, and VMware are not companies that you instantly recognize as being in the open source business. The fact that some of the heavyweights in the closed source software business are now among the most active participants in open source should be an eye-opener for companies contemplating a foray into the world of collaborative software development.&lt;/p&gt;

&lt;p&gt;While open source may seem like an overnight success, the role that open source communities and projects play towards the success of household names such as Google, Netflix, Facebook, Lyft, GE, Walmart, and others is less known. According to the &lt;a href=&quot;https://github.com/todogroup/survey&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;TODO Group&lt;/a&gt;, 55 percent of companies are shipping commercial products based on open source. The same survey found that 72 percent of companies use open source for non-commercial or internal reasons.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Why is open source radically changing the software industry?&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;As it turns out, some old-fashioned rationale is at play: organizations are realizing that the benefits of open source vastly outweigh the costs and risks. For a software development model that has been around for twenty years, the benefits that open source delivers and the foundational aspects of its ecosystem are still unclear to many business leaders.&lt;/p&gt;

&lt;p&gt;While the term “digital transformation” may have &lt;a href=&quot;https://en.wikipedia.org/wiki/Jumping_the_shark&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;jumped the shark&lt;/a&gt;, it’s undeniable that in the era of the digital economy, all companies are becoming technology businesses. Companies, irrespective of size, are putting customers at the center of everything they do and leveraging technology to deliver services in new and innovative ways. Case studies where cutting-edge technology helped startups upend traditional businesses are aplenty.&lt;/p&gt;

&lt;p&gt;What is perhaps less understood by the casual observer is the pivotal role that open source technologies and communities play in fuelling commercial digitization in industry sectors as varied as financial services, automotive, mining, healthcare, and entertainment (think CGI-based blockbusters in movie theatres.)&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Open source and the rise of the “entropeneur”&lt;sup&gt;TM&lt;/sup&gt;&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;A new class of entrepreneurs, or better yet, “entr&lt;strong&gt;open&lt;/strong&gt;eurs” is leveraging open source to drive innovation-based strategies that radically change the way business is done.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.licdn.com/dms/image/C4E12AQGJP7-qJG7H8g/article-inline_image-shrink_1500_2232/0?e=1554940800&amp;amp;v=beta&amp;amp;t=gZO4xvV-xnVwRBtni5abJ7T3toKaH8yHWo2xDNAYqT4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Open source allows community members to control their development costs while maintaining the flexibility they desire in their software. While reduced cost, flexibility, reliability, control, and sustainability are the apparent benefits of open source software, the key drivers behind its adoption can be linked to revenue growth and business transformation initiatives underway at companies.&lt;/p&gt;

&lt;p&gt;As companies implement new technologies such as cloud, IoT, and AI, the speedy development and rollout out of interoperable business applications are becoming critical to achieving rapid success at scale.&lt;/p&gt;

&lt;p&gt;Companies born in the cloud, and the ones migrating to it, are looking for newer development methodologies and frameworks that break vendor and platform lock-in. Participating in open source drastically lowers dependencies on vendor release cycles and licensing rules while providing organizations the freedom to effortlessly port applications and workloads from one cloud platform provider to another.&lt;/p&gt;

&lt;p&gt;Open source and multi-cloud portability have evolved as two key enablers of digitalization that allow companies to collaborate and innovate their way to commercial success.&lt;/p&gt;

&lt;p&gt;So, what does it take for an entropeneur to be successful?&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Community focus&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The community approach towards software development removes single-vendor dependencies while enabling and encouraging members to work collaboratively to build on the learnings of others. More eyes on the code ensure that issues are identified and fixed promptly allowing the maintainers to deliver software code that is bug-free, interoperable, and secure, giving credence to Linus’s Law: &lt;em&gt;Given enough eyeballs, all bugs are shallow.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;For businesses, there is a good reason to encourage employee participation in open source projects. A recent Harvard Business School &lt;a href=&quot;https://hbswk.hbs.edu/item/the-hidden-benefit-of-giving-back-to-open-source-software&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;post&lt;/a&gt; points to studies that indicate that paying employees to contribute to open source boosted their productivity by as much as a hundred percent.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Paying it forward&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;It is essential to understand the fundamental principles under which an open source ecosystem exists. The primary tenet of open source is: Give and take.&lt;/p&gt;

&lt;p&gt;The fact is, if open source plays a role in your business, giving back — either through upstream contributions or membership in an open source software foundation — is an investment in the quality and sustainability of the projects you rely on.&lt;/p&gt;

&lt;p&gt;However, a 2018 &lt;a href=&quot;https://www.digitalocean.com/currents/october-2018/&quot; rel=&quot;nofollow noopener&quot; target=&quot;_blank&quot;&gt;survey&lt;/a&gt; by Digital Ocean shows that companies may not be putting their money where their mouth is.&lt;/p&gt;

&lt;blockquote&gt;“ &lt;em&gt;Only 18 percent of respondents said their company is a member of an open source-related organization, and 75 percent said their company invests $1k or less every year in donations to open source&lt;/em&gt;.”&lt;/blockquote&gt;

&lt;p&gt;It is a pay-it-forward model that relies on companies giving back to the community. A community implies collaboration that goes beyond the confines of a single company. Open source requires competitors to work collaboratively for the common goal. The larger the community, the better the chances of sustainability of its projects, a critical requirement for any production software.&lt;/p&gt;

&lt;h3&gt;&lt;strong&gt;Participation is key&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In an ecosystem that includes developers who volunteer their time to create and maintain software, and the users that take the free software and build products on top of it, there is a delicate balance. For the modestly-staffed foundations that administer the community and oversee the open source projects and its committers, a commercially viable ecosystem is vital to its success.&lt;/p&gt;

&lt;p&gt;The sustainability of open source is predicated on the participation of corporate entities that bring financial stability to its organization and the developers who contribute their time. The foundations, in turn, strive to foster a supportive environment that encourages newcomers to participate, while ensuring the existing members continue to enjoy the experience of building innovative software solutions that become the building blocks of successful companies.&lt;/p&gt;

&lt;p&gt;So, can you afford not to get involved?&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/open-source&quot;&gt;Open Source&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/business&quot;&gt;Business&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/ecosystem&quot;&gt;Ecosystem&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/sustainability&quot;&gt;Sustainability&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/open-collaboration&quot;&gt;Open collaboration&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/open-innovation&quot;&gt;Open innovation&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 06 Feb 2019 20:33:33 +0000</pubDate>
</item>
<item>
	<title>Michael Vorburger: OpenDaylight has Oomph!</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-2224194412636345302.post-3632268510737765609</guid>
	<link>http://blog2.vorburger.ch/2019/02/opendaylight-has-oomph.html</link>
	<description>&lt;div style=&quot;text-align: justify;&quot;&gt;When I started to dig into the &lt;a href=&quot;https://www.opendaylight.org/&quot;&gt;Open Daylight&lt;/a&gt; (ODL) code base in 2016, I almost got a severe case of irreversible stomach flu when I read on it’s &lt;a href=&quot;https://wiki.opendaylight.org/view/GettingStarted:_Eclipse&quot;&gt;Getting Started with Eclipse&lt;/a&gt; Wiki page that: &lt;i&gt;&quot;Eclipse is no longer able to compile OpenDaylight. The reason is three Maven plugins which are used by OpenDaylight but are not integrated into Eclipse: maven-plugin-plugin, karaf-maven-plugin and maven-antrun-plugin. This means you will always have Eclipse compile errors in the project (this could go to up to 100000 errors). You can use Eclipse for editing easily but to compile the project you need to open a terminal window and do the compilation according to the instructions from.&quot; &lt;/i&gt;(I may have removed this sentence from that Wiki page by the time you read this.) &lt;/div&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;br /&gt;The certainly meant to be helpful advise from a new work colleague at Red Hat that &quot;we all ended just using JetBrains IntelliJ IDEA‎&quot; didn't quite do it for me, particularly for contributing to the leading OPEN future of networking kind of community,  so... what to do?! As any real Hacker would presumably agree, there really was only one solution for me: Take a pause from reading books and watching videos to come up to speed about Software Defined Networking (as fascinating as those IP packets in wireshark can be from the inside... or are they?), and get down to fixing any problems anywhere preventing the Open Daylight code base from being able to be worked on neatly within Eclipse!&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;In 2016, the right way to go about is to use the &lt;a href=&quot;http://eclipse.org/oomph&quot;&gt;Eclipse.org Oomph project&lt;/a&gt;, which also powers the new Eclipse Installer new used by millions for the core IDE &lt;a href=&quot;http://eclipse.org/downloads&quot;&gt;eclipse.org/downloads&lt;/a&gt;, and create a project catalog with Oomph setup models for the &lt;a href=&quot;https://git.opendaylight.org/gerrit/#/admin/projects/&quot;&gt;ca. 80-ish individual sub-projects&lt;/a&gt; which are part of OpenDaylight.&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;It took me a little bit of great fun times to figure out how to &lt;a href=&quot;https://git.opendaylight.org/gerrit/#/q/owner:vorburger&quot;&gt;change a number of things in various pom.xml in ODL&lt;/a&gt; (incl. some M2E Maven for Eclipse lifecycle-mapping; initially in pom.xml but then I realized that when using &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_Oomph_Authoring#How_to_create_M2E_lifecycle-mapping-metadata.xml_to_avoid_littering_your_pom.xml_with_org.eclipse.m2e:lifecycle-mapping&quot;&gt;Oomph M2E lifecycle mappipngs are probably best just kept in workspace preferences&lt;/a&gt;), and a &lt;a href=&quot;https://github.com/m2e-code-quality/m2e-code-quality/issues/83&quot;&gt;weird Maven/Eclipse interrelation Checkstyle LICENSE header check issue&lt;/a&gt; (contributing &lt;a href=&quot;https://github.com/m2e-code-quality/m2e-code-quality/pull/87&quot;&gt;a clearer LOG about that&lt;/a&gt;); and &lt;a href=&quot;https://github.com/m2e-code-quality/m2e-code-quality/issues/84&quot;&gt;fixing the build of another project&lt;/a&gt;, work around &lt;a href=&quot;https://git.opendaylight.org/gerrit/#/c/37718/&quot;&gt;some small but blocking M2E corner case problem&lt;/a&gt;, but ultimately it now all works rather nicely!&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;This setup model pre-installs a number of nice to have and useful Eclipse plugins which you may find of interest for your projects too, if you haven't heard of them yet incl. &lt;a href=&quot;https://github.com/m2e-code-quality/m2e-code-quality&quot;&gt;M2E Code Quality&lt;/a&gt;, used to configure Checkstyle, FindBugs &amp;amp; PMD Eclipse plugins automatically in-line with their respective Maven settings.&lt;/div&gt;&lt;br /&gt;see &lt;a href=&quot;https://github.com/vorburger/opendaylight-eclipse-setup/&quot;&gt;https://github.com/vorburger/opendaylight-eclipse-setup/&lt;/a&gt; and these videos:&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;div style=&quot;text-align: justify;&quot;&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;/div&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 05 Feb 2019 21:11:43 +0000</pubDate>
	<author>noreply@blogger.com (Michael Vorburger)</author>
</item>
<item>
	<title>Andrey Loskutov: Initial content assist size</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-342159971341432126.post-2889325859150603217</guid>
	<link>http://javaclipse.blogspot.com/2019/02/initial-content-assist-size.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Question to the masses: which &lt;b&gt;initial&lt;/b&gt; content assist size do you prefer?&lt;br /&gt;&lt;br /&gt;We discuss right now if the default content assist size could be increased in the next Eclipse version. The rationale is that the original content assist was created at the time (2002) where default screen resolution was 800x600 or may be 1024x768 (see &lt;a href=&quot;https://en.m.wikipedia.org/wiki/Display_resolution&quot;&gt;https://en.m.wikipedia.org/wiki/Display_resolution&lt;/a&gt;), today displays start usually with 1920×1080 for notebooks and go further in desktops. So there is a room to give users more overview on the offered API's list and also javadoc help. Given that, and the fact that the size of the popup can be changed at any time, I think it makes sense to lift up the old popup size a bit.&lt;br /&gt;&lt;br /&gt;The change we propose (&lt;a href=&quot;https://git.eclipse.org/r/128617&quot;&gt;https://git.eclipse.org/r/128617&lt;/a&gt;) shows on bigger screens 50% more content (15 lines instead of the 10), this helps users to discover more things without scrolling or manually resizing popup, especially those who don't know &lt;b&gt;what&lt;/b&gt; they are looking for exactly, so they can't just type to filter the results.&lt;br /&gt;&lt;br /&gt;Your opinion is important, please comment on bug &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=538594&quot;&gt;https://bugs.eclipse.org/bugs/show_bug.cgi?id=538594&lt;/a&gt;. For those who care, the proposed change is already integrated in the latest nightly builds of Eclipse 4.11, which you can download from &lt;a href=&quot;https://download.eclipse.org/eclipse/downloads/&quot;&gt;https://download.eclipse.org/eclipse/downloads/&lt;/a&gt; and try on your own screen size.&lt;br /&gt;&lt;br /&gt;Please note: this change affects only &lt;b&gt;initial&lt;/b&gt; content assist size, user is free to change it at any time and this will be also remembered.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Screen size 1920 x 1080, no zoom:&lt;/b&gt;&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-Vh4bvh39hYI/XFiqrijIgyI/AAAAAAAAiNA/1WbENzBpdt8XHy1ju6GQ22gEHuI3vbMdQCEwYBhgL/s1600/1920x1080_before.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;360&quot; src=&quot;https://1.bp.blogspot.com/-Vh4bvh39hYI/XFiqrijIgyI/AAAAAAAAiNA/1WbENzBpdt8XHy1ju6GQ22gEHuI3vbMdQCEwYBhgL/s640/1920x1080_before.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;vs&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-qyIq7A4Ubf4/XFirAKLWUfI/AAAAAAAAiNg/soiS0eYWcDsKvcJ9sl97dChyQD1Oq1RtQCEwYBhgL/s1600/1920x1080_after.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;360&quot; src=&quot;https://2.bp.blogspot.com/-qyIq7A4Ubf4/XFirAKLWUfI/AAAAAAAAiNg/soiS0eYWcDsKvcJ9sl97dChyQD1Oq1RtQCEwYBhgL/s640/1920x1080_after.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;b&gt;Same as above side by side:&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-CbTN6tkncms/XFirAN-FksI/AAAAAAAAiNs/wOUrGOy_sBk93roYA_sfYxHBUb_Tgi4TgCEwYBhgL/s1600/1920x1080_below_each_other.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;360&quot; src=&quot;https://1.bp.blogspot.com/-CbTN6tkncms/XFirAN-FksI/AAAAAAAAiNs/wOUrGOy_sBk93roYA_sfYxHBUb_Tgi4TgCEwYBhgL/s640/1920x1080_below_each_other.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;b&gt;Screen size 1920 x 1080, 125% OS zoom:&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-VENeyUM0DBU/XFiqxhr6YAI/AAAAAAAAiNg/ff7kRfk3bFUgE_eYW8QbxZDepOKsm2hWQCEwYBhgL/s1600/1920x1080_x1.25_before.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;360&quot; src=&quot;https://4.bp.blogspot.com/-VENeyUM0DBU/XFiqxhr6YAI/AAAAAAAAiNg/ff7kRfk3bFUgE_eYW8QbxZDepOKsm2hWQCEwYBhgL/s640/1920x1080_x1.25_before.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;vs&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-ytzWi0Ybx8s/XFiq_5HuMOI/AAAAAAAAiNc/0YePqe8sm_IP-x68vTv4iMg5hVVDt9EXACEwYBhgL/s1600/1920x1080_x1.25_after.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;360&quot; src=&quot;https://4.bp.blogspot.com/-ytzWi0Ybx8s/XFiq_5HuMOI/AAAAAAAAiNc/0YePqe8sm_IP-x68vTv4iMg5hVVDt9EXACEwYBhgL/s640/1920x1080_x1.25_after.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;b&gt;Same as above side by side:&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://1.bp.blogspot.com/-TJwWPavvY9k/XFirAmlEbUI/AAAAAAAAiNk/w5R2K8RW_FoVdx8QqSJESEHXNF0sylTUACEwYBhgL/s1600/1920x1080_x1.25_below_each_other.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;360&quot; src=&quot;https://1.bp.blogspot.com/-TJwWPavvY9k/XFirAmlEbUI/AAAAAAAAiNk/w5R2K8RW_FoVdx8QqSJESEHXNF0sylTUACEwYBhgL/s640/1920x1080_x1.25_below_each_other.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;b&gt;Screen size 1920 x 1200, no zoom:&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://3.bp.blogspot.com/-Fg01GT21ITs/XFirAyLKLbI/AAAAAAAAiNs/WHj6zXM9t1MMO6VQvHp2dtp0I8td6It5gCEwYBhgL/s1600/linux_before_1920x1200.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://3.bp.blogspot.com/-Fg01GT21ITs/XFirAyLKLbI/AAAAAAAAiNs/WHj6zXM9t1MMO6VQvHp2dtp0I8td6It5gCEwYBhgL/s640/linux_before_1920x1200.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;vs&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;https://4.bp.blogspot.com/-1Ys0t5Kf0J0/XFirAmduB_I/AAAAAAAAiNo/nFAaOZ5aLZQtypss2i15-Nytvf1G6HjOwCEwYBhgL/s1600/linux_after_1920x1200.png&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;400&quot; src=&quot;https://4.bp.blogspot.com/-1Ys0t5Kf0J0/XFirAmduB_I/AAAAAAAAiNo/nFAaOZ5aLZQtypss2i15-Nytvf1G6HjOwCEwYBhgL/s640/linux_after_1920x1200.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Please comment on the bug &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=538594&quot;&gt;https://bugs.eclipse.org/bugs/show_bug.cgi?id=538594&lt;/a&gt;!&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;b&gt;PS:&lt;/b&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: left;&quot;&gt;Sorry for advertising, but if you always wanted work with me together, check also this post: &lt;a href=&quot;http://javaclipse.blogspot.com/2018/08/we-are-hiring-2-eclipse-developers.html&quot;&gt;http://javaclipse.blogspot.com/2018/08/we-are-hiring-2-eclipse-developers.html&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 04 Feb 2019 21:58:27 +0000</pubDate>
	<author>noreply@blogger.com (Andrey Loskutov)</author>
</item>
<item>
	<title>Andrey Loskutov: We are hiring 2 Eclipse developers</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-342159971341432126.post-4266215239435919015</guid>
	<link>http://javaclipse.blogspot.com/2018/08/we-are-hiring-2-eclipse-developers.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;Do you want to have...&lt;br /&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;a top notch RHEL workstation with 256 GB RAM, SSD and 16 core Xeon?&lt;/li&gt;&lt;li&gt;a recent Thinkpad of your choice?&lt;/li&gt;&lt;li&gt;a very challenging job on an extreme complex software piece?&lt;/li&gt;&lt;li&gt;agile, intercultural, englisch speaking working environment in Germany?&lt;/li&gt;&lt;li&gt;work for a &lt;b&gt;real&lt;/b&gt; high-tech company (we build semiconductor test hardware to test chips from tomorrow for almost all chip companies on the world)?&lt;/li&gt;&lt;/ul&gt;&lt;a href=&quot;https://www.advantest.com/en/about-advantest/about-advantest-europe&quot;&gt;We&lt;/a&gt; are still hiring!&lt;br /&gt;&lt;br /&gt;&lt;a href=&quot;https://www.advantest.com/en/about-advantest/about-advantest-europe&quot;&gt;We&lt;/a&gt; have 2 opened positions for Eclipse developers in &lt;a href=&quot;https://goo.gl/maps/FgrdmJnCh8T2&quot;&gt;our main office&lt;/a&gt; in Böblingen, Germany (no, it is not a remote job).&lt;br /&gt;&lt;br /&gt;The job focus is Java/Eclipse development in the context of the very complex Eclipse based IDE used as the front end for the semiconductor tester.&lt;br /&gt;&lt;br /&gt;We speak English and Java here, if you are interested, just drop me a mail.&lt;br /&gt;&lt;br /&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 04 Feb 2019 21:08:57 +0000</pubDate>
	<author>noreply@blogger.com (Andrey Loskutov)</author>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.6.3</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-6-3</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-6-3</link>
	<description>&lt;article&gt;&lt;p&gt;We have just released Vert.x 3.6.3, a bug fix release of Vert.x 3.6.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.6.2, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;In addition, the Kotlin support for data objects provides now a more &lt;a href=&quot;https://github.com/vert-x3/vertx-lang-kotlin/issues/103[idiomatic&quot;&gt;https://github.com/vert-x3/vertx-lang-kotlin/issues/103[idiomatic&lt;/a&gt;],
data object support.&lt;/p&gt;
&lt;p&gt;Vert.x 3.6.3 release notes&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.6.3-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.6.3-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.6.3%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.6.3/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 04 Feb 2019 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation: 15 Years Young</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/vFXIGRTG3aE/eclipse-foundation-15-years-young</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/vFXIGRTG3aE/eclipse-foundation-15-years-young</link>
	<description>Saturday, February 2, 2019 marks the 15th birthday of the Eclipse Foundation. That was the day that it was publicly and officially announced, and the opening day of the first ever EclipseCon conference.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/vFXIGRTG3aE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 01 Feb 2019 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Mike Milinkovich: Eclipse Foundation: 15 Years Young</title>
	<guid isPermaLink="false">http://eclipse-foundation.blog/?p=1483</guid>
	<link>https://eclipse-foundation.blog/2019/02/01/eclipse-foundation-15-years-young/</link>
	<description>&lt;p&gt;Saturday, February 2, 2019 marks the 15th birthday of the Eclipse Foundation. That was the day that it was publicly and officially announced, and the opening day of the first ever EclipseCon conference.&lt;/p&gt;
&lt;p&gt;The creation of the Eclipse Foundation was quite an event at the time. It was really the first time that a member-supported consortium was married to a truly open and meritocratic open source project community. In 2004, the existing open source foundations were organizations like Apache and Mozilla, which are organized as charities. The consortium approach is a model that has become completely normalized (think Linux Foundation, Cloud Foundry, CNCF, etc.), but in 2004 it was very novel. In my personal experience the balance that we have within the Eclipse community between open source development, and fostering the use and adoption of that technology has been incredibly powerful.&lt;/p&gt;
&lt;p&gt;There were 50 organizations that were founding members of the Eclipse Foundation, but it should be recognized that IBM, SAP, HP, and Intel did the heavy lifting in drafting the Bylaws and establishing the legal framework for the EF. IBM and SAP remain strategic members of the Eclipse Foundation to this day, and their support is greatly appreciated. From 50 we have grown to over 275, and that growth reflects the continuing relevance of the Eclipse Foundation to the software and broader technology industry.&lt;/p&gt;
&lt;p&gt;But it has been the growth of the project community at Eclipse that has been the most exciting. When the Eclipse Foundation was founded 15 years ago, there were about 12 projects hosted here. That number is now over 360. Our committer population has grown from about 150 in 2004 (mostly IBMers) to a very diverse group of almost 1600. But the growth in the breadth of technology hosted at the EF has been striking. Our roots are in desktop developer tools, and the Eclipse IDE remains our most broadly used project. But our community has grown in ways that we never imagined at the outset: modeling and model-based engineering environments, the Internet of Things, automotive technologies, geospatial, and cloud native Java runtimes are all now significant pieces of the overall Eclipse community. What all of these projects have in common are a shared community of practice around the Eclipse Development Process, and our robust intellectual property management.&lt;/p&gt;
&lt;p&gt;Interestingly, we’re seeing project growth at the Eclipse Foundation continuing to accelerate. Last year was a record year of project growth. You may assume that was because of the migration of Java EE from Oracle to Jakarta EE at the Eclipse Foundation, but we had significant growth over and above that in other areas such as IoT.&lt;/p&gt;
&lt;p&gt;The past 15 years has been an adventure. The Eclipse Foundation has survived and thrived in a world that has changed dramatically over that period of time. But more importantly, the community that we serve has grown and thrived. There are far too many people that deserve a “thank you” than I could possibly list here. But you know who you are. So thanks to all, and looking forward to many more years of success for the Eclipse community.&lt;/p&gt;</description>
	<pubDate>Fri, 01 Feb 2019 08:00:51 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Jakartablogs.ee is Live! PS: Bloggers, We Need You!</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/3RT2ePABFqk/jakartablogsee-live-ps-bloggers-we-need-you</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/3RT2ePABFqk/jakartablogsee-live-ps-bloggers-we-need-you</link>
	<description>Jakartablogs.ee is the new blog home for our global community to stay up to date on the latest Jakarta EE news, technologies, best practices, and more.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/3RT2ePABFqk&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 29 Jan 2019 20:20:00 +0000</pubDate>
</item>
<item>
	<title>Thabang Mashologu: Jakartablogs.ee is Live! PS: Bloggers, We Need You!</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6666 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/thabang-mashologu/jakartablogsee-live-ps-bloggers-we-need-you</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;Just in time for the Eclipse 5.1 GA release January 29, 2019, we are happy to announce that our new &lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;Jakartablogs.ee&lt;/a&gt; blog aggregator is live!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;Jakartablogs.ee&lt;/a&gt; is the new blog home for our global community to stay up to date on the latest Jakarta EE news, technologies, best practices, and more. We hope that &lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;Jakartablogs.ee&lt;/a&gt; will be a place where the world will come to read relevant, timely, and thought-provoking content on open source enterprise Java innovation for the cloud.&lt;/p&gt;

&lt;p&gt;Are you a prolific blogger on topics related to cloud native Java, Jakarta EE, and open source? If so, WE NEED YOU!&lt;/p&gt;

&lt;p&gt;Adding a blog to the Jakartablogs feed is easy. After reviewing the &lt;a href=&quot;https://github.com/jakartaee/jakartablogs.ee#guidelines&quot;&gt;guidelines&lt;/a&gt;, you can simply open a &lt;a href=&quot;https://github.com/jakartaee/jakartablogs.ee/issues/new?template=add_blog.md&quot;&gt;GitHub issue&lt;/a&gt; or create a pull request with your feed-specific information.&lt;/p&gt;

&lt;p&gt;We look forward to sharing exciting Jakarta EE updates, news, and content from some of the industry’s leading minds that motivates, educates, and inspires the engagement of our community.&lt;/p&gt;

&lt;p&gt;Please visit &lt;a href=&quot;https://jakartablogs.ee/&quot;&gt;Jakartablogs.ee&lt;/a&gt;, subscribe to the site’s &lt;a href=&quot;https://jakartablogs.ee/rss20.xml&quot;&gt;aggregated feed&lt;/a&gt;, and add your blog today!&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;&quot; src=&quot;https://blogs.eclipse.org/sites/default/files/custom_uploads/Screen%20Shot%202019-01-29%20at%205.20.00%20AM.png&quot; style=&quot;height: 302px; width: 800px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;field field-name-field-blog-tags field-type-taxonomy-term-reference field-label-above&quot;&gt;&lt;div class=&quot;field-label&quot;&gt;Tags: &lt;/div&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakartaee&quot;&gt;#JakartaEE&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item odd&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/jakartablogs&quot;&gt;JakartaBlogs&lt;/a&gt;&lt;/div&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;a href=&quot;https://blogs.eclipse.org/blog-tags/community&quot;&gt;Community&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 29 Jan 2019 10:24:39 +0000</pubDate>
</item>
<item>
	<title>Donald Raab: Leverage Information Chunking to scale your Java library package design</title>
	<guid isPermaLink="false">https://medium.com/p/fcedf64af434</guid>
	<link>https://medium.com/oracledevs/leverage-information-chunking-to-scale-your-java-library-package-design-fcedf64af434?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Organizing and grouping your packages can help make your library easier to navigate, comprehend and grow over time.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*R-Y8a6lzMw0Aqs9kM6P6ag.jpeg&quot; /&gt;Grounds for Sculpture, Hamilton Township, NJ&lt;/figure&gt;&lt;h3&gt;Scaling Java library package design is hard&lt;/h3&gt;&lt;p&gt;Java gives us packages to organize related classes and interfaces. Packages are extremely useful, but can be hard to leverage effectively because every package requires a name. Naming things is hard. Organizing things effectively into a hierarchy can be a challenge. Renaming and moving things may be easy in your IDE, but can be extremely hard on your clients if they have to manually replay the rename and move refactorings in their code when they upgrade your library.&lt;/p&gt;&lt;p&gt;It may seem a trivial decision to put everything in the same package and jar when the number of classes in your library is less than ten or twenty. But what do you do if the number of classes and interfaces you have is much more than that? If you have a large number of interfaces and classes in your library, consider splitting your API and implementation classes into separate packages. Also, if you want to enable others to implement your API without having to include the default implementations, having a separate API jar is helpful.&lt;/p&gt;&lt;p&gt;I will explain the Information Chunking strategy that we leverage in Eclipse Collections. Our package hierarchy evolved significantly over time as the library grew. The package design decisions we made consciously before we open sourced Eclipse Collections have made it possible for us to continue to grow the library over an extended period of time.&lt;/p&gt;&lt;h3&gt;How Information Chunking works&lt;/h3&gt;&lt;p&gt;The human mind can remember seven plus or minus two things at a time. This is why phone numbers are seven digits long in the United States. Humans can more effectively manage a large set of information if related concepts are grouped together in chunks of seven plus or minus two things. Sometimes sticking strictly with this number isn’t possible without exploding the number of packages unnecessarily. For instance, organizing every primitive type container into its own package would probably be overkill. Alphabetic sorting of interface and class names gives us a visual grouping within a package so we can more quickly focus or ignore things based on their prefix.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Recommendation:&lt;/strong&gt; Don’t make me scroll. If you make me scroll to see all of the classes in a package, then it is too many.&lt;/p&gt;&lt;h3&gt;The Eclipse Collections Package Strategy&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Separate Interfaces from Implementation&lt;/li&gt;&lt;li&gt;Organize top-level packages by container type&lt;/li&gt;&lt;li&gt;Organize container type specializations with container types (e.g. sorted)&lt;/li&gt;&lt;li&gt;Organize impl packages by Interface type (e.g. Mutable, Immutable)&lt;/li&gt;&lt;li&gt;Organize primitive types into a separate package&lt;/li&gt;&lt;/ul&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*x7tvAh5_CcaS0TZ1O62sRQ.png&quot; /&gt;High-level concerns in Eclipse Collections&lt;/figure&gt;&lt;h3&gt;Separate Interfaces from Implementation&lt;/h3&gt;&lt;p&gt;Eclipse Collections has separate packages and jar files for API interfaces and implementation classes. This allows for clients of our library to understand both the API and implementation separately and group both into a similar mental model by container type.&lt;/p&gt;&lt;h4&gt;Eclipse Collections org.eclipse.collections.api/impl packages&lt;/h4&gt;&lt;p&gt;Eclipse Collections has separate modules and package names for api and implementation. The api packages are on the left, and the impl packages are on the right.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/910/1*k9AWYqVmeltDWz8kUZXt0g.jpeg&quot; /&gt;Eclipse Collections API and Implementation Package Structures&lt;/figure&gt;&lt;p&gt;Eclipse Collections is a large library, but has a manageable number of high level concepts grouped into packages. We have organized Eclipse Collections so that it is easy to explore the supported container types and dive into additional detail as necessary.&lt;/p&gt;&lt;p&gt;Having the API interfaces separated from implementation classes has resulted in extra benefits for the library. The implementation classes depend on the API interfaces, but not the other way around. When API interfaces and implementation classes are in the same packages and located in the same jar, it becomes possible to introduce unwanted dependencies between interfaces and their implementation that are hard to remove later.&lt;/p&gt;&lt;h4&gt;JDK java.util package&lt;/h4&gt;&lt;p&gt;The interfaces and classes contained in the JDK &lt;strong&gt;java.util&lt;/strong&gt; package are shown below.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/982/1*K2Lxki2nCRj2kqD2k5ZrNA.jpeg&quot; /&gt;JDK java.util package&lt;/figure&gt;&lt;p&gt;This is a lot of classes and interfaces for a single package. You can differentiate interfaces and classes by their icons, but there is no way to understand the relationship between any of these utility classes. There are collections, exceptions, formatters, comparators, statistics, optionals, calendars, date, service loader, string related stuff, time zones, timer classes, and other utilities all in the same package. This is a bag of interfaces and classes sorted alphabetically by name.&lt;/p&gt;&lt;p&gt;The &lt;strong&gt;java.util&lt;/strong&gt; package has become a parking lot for things loosely classified as “utility”. Ideally, there should be a &lt;strong&gt;java.util.collection&lt;/strong&gt; package which contains only classes and interfaces that deal with collections. Because of the backwards compatibility guarantee of Java, the only reasonable way forward is to introduce new concepts in new packages like &lt;strong&gt;java.util.stream&lt;/strong&gt;.&lt;/p&gt;&lt;h4&gt;Google Guava com.google.collect package&lt;/h4&gt;&lt;p&gt;These are the classes and interfaces in Google Guava’s &lt;strong&gt;com.google.collect&lt;/strong&gt; package.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*7_1jsHkSUWpix_bChGbgig.jpeg&quot; /&gt;Guava package com.google.collect&lt;/figure&gt;&lt;p&gt;There are a lot of classes in this package, but they are all related to collections. There is a visual grouping that happens due to the prefix of some classes (e.g. Filtered, Forwarding, Immutable, Regular) but it is hard to focus on the interfaces vs. the implementations to understand the overall focus and scope of the library.&lt;/p&gt;&lt;h4&gt;Apache org.apache.commons.collections4 package&lt;/h4&gt;&lt;p&gt;The last library I will compare with here is Apache Commons Collections, which is the oldest third-party Java collections library.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/610/1*HshXa-MHHoBbs9FYk0faug.jpeg&quot; /&gt;Apache package org.apache.commons.collections4&lt;/figure&gt;&lt;p&gt;Apache Commons Collections organizes its implementations by container type, but does not split its API interfaces and implementations into separate packages.&lt;/p&gt;&lt;p&gt;Eclipse Collections is the only Java collections library out of the four that has split its API and Implementations into separate packages and separate jar files.&lt;/p&gt;&lt;h3&gt;Organize packages by container type&lt;/h3&gt;&lt;p&gt;When we decided to add immutable container types and implementations to Eclipse Collections, we knew we needed to reorganize the library. We knew it would not work well if we had over a hundred classes and interfaces in a single package. We also decided it would be good to separate our API interfaces into a separate package structure. We then chose “container type” as the high level package grouping.&lt;/p&gt;&lt;p&gt;This is the set of high level containers we had to figure out how to organize in our API and implementation packages.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/777/1*Gs6oL36CsN69d4aJPmBsag.png&quot; /&gt;Eclipse Collections container types&lt;/figure&gt;&lt;p&gt;Each container type then had a set of additional concerns that needed to be addressed in the package hierarchy.&lt;/p&gt;&lt;p&gt;This is what it looks like when you expand the &lt;em&gt;List&lt;/em&gt; container type package in both the interface and implementation packages.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*UtDtuNGSw-bHJYncopKuoA.jpeg&quot; /&gt;Interfaces in API package drive the package hierarchy in implementation package&lt;/figure&gt;&lt;h3&gt;Organize container type specializations with container types&lt;/h3&gt;&lt;p&gt;Eclipse Collections has &lt;strong&gt;sorted&lt;/strong&gt; versions of &lt;em&gt;Bag&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt;, and &lt;em&gt;Map&lt;/em&gt;. Each of these container types have a sub-package named &lt;strong&gt;sorted&lt;/strong&gt;. This strategy can be used with other container type specializations as needed.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*PBBpKrFK8lOepW1mdLyMOg.jpeg&quot; /&gt;Bag, Set and Map all have sorted versions&lt;/figure&gt;&lt;h3&gt;Organize impl packages by Interface types&lt;/h3&gt;&lt;p&gt;There are three &lt;em&gt;primary&lt;/em&gt; interface types for all container types in Eclipse Collections. They are &lt;strong&gt;Mutable&lt;/strong&gt;, &lt;strong&gt;Immutable&lt;/strong&gt; and &lt;strong&gt;Iterable&lt;/strong&gt; (a.k.a. Readable).&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*e-ojSJgIpoWCKOE7noQkfQ.png&quot; /&gt;Symmetry across container types — Iterable, Mutable, Immutable&lt;/figure&gt;&lt;p&gt;For the &lt;em&gt;List&lt;/em&gt; container type, there are implementation classes for the interface types of &lt;strong&gt;Mutable, Immutable&lt;/strong&gt; and &lt;strong&gt;FixedSize&lt;/strong&gt;. FixedSize is currently limited to &lt;em&gt;List&lt;/em&gt;, &lt;em&gt;Set&lt;/em&gt; and &lt;em&gt;Map&lt;/em&gt; container types, and is for achieving memory efficiency for Mutable container types that are are like arrays. That is they can be modified, but they cannot be grown.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/448/1*iR1iGVCubv1NNKyangmKMA.jpeg&quot; /&gt;Object List implementations organized by FixedSize, Immutable and Mutable&lt;/figure&gt;&lt;h3&gt;Organize primitive types into a separate package&lt;/h3&gt;&lt;p&gt;Primitive containers are organized below the container type packages in the API jar and below the Mutable and Immutable packages in the implementation jar.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/751/1*JX5H5yQR7zPSue7kwr4VuA.jpeg&quot; /&gt;API packages (left) and Impl packages(right) for List container type and Mutable Implementations only&lt;/figure&gt;&lt;p&gt;We could have split the primitive collections into separate packages by primitive type. This would have resulted in eight packages for each of the primitive packages. We decided not to do this because the alphabetic sorting of class names with their prefixes provided enough of a visual grouping in the primitive packages.&lt;/p&gt;&lt;h3&gt;Enough is enough&lt;/h3&gt;&lt;p&gt;You need to eventually make a decision when you have enough packages in your hierarchy, and it may not work perfectly with the magical number seven in mind.&lt;/p&gt;&lt;p&gt;The mutable collection implementations have a few extra concerns to deal with — Synchronized, Unmodifiable and MultiReader. We felt these concepts did not warrant their own packages. There is no good name we could come up with to group them together in a package. A name like “mutable.other” would not be terribly useful. So we stopped at &lt;strong&gt;list.mutable&lt;/strong&gt; and &lt;strong&gt;list.mutable.primitive&lt;/strong&gt; on the implementation packages.&lt;/p&gt;&lt;h3&gt;When is it time to restructure the packages?&lt;/h3&gt;&lt;p&gt;We reorganized the packages in Eclipse Collections when we added Immutable Collections to the library (#10), right before we open sourced the library as GS Collections. Immutable Collections significantly increased the number of concepts we had to manage in our packages.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*IdXxdLptmbKRfhWpQ5Mxmw.jpeg&quot; /&gt;Package restructuring happened around item #10&lt;/figure&gt;&lt;p&gt;The next point where we introduced something large to the ecosystem that had to fit into our package hierarchy was with primitive collections (#13). We were able to accomplish this without a complete restructuring by inserting &lt;strong&gt;primitive&lt;/strong&gt; packages into the existing hierarchy below their object counterparts.&lt;/p&gt;&lt;p&gt;The parent packages changed again from &lt;strong&gt;com.gs.collections&lt;/strong&gt; to &lt;strong&gt;org.eclipse.collections&lt;/strong&gt; when the library was migrated to the Eclipse Foundation and became Eclipse Collections. We open sourced a separate library to help users of GS Collections convert to Eclipse Collections — &lt;a href=&quot;https://github.com/eclipse/gsc-ec-converter&quot;&gt;https://github.com/eclipse/gsc-ec-converter&lt;/a&gt;&lt;/p&gt;&lt;h3&gt;Final Thoughts&lt;/h3&gt;&lt;p&gt;Java packages are a solution to help with the problem of name spacing and logical grouping. When you’re evolving and growing a library, you should be prepared to optimize your package structure to allow for better logical grouping and information chunking.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on GitHub.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=fcedf64af434&quot; width=&quot;1&quot; /&gt;&lt;hr /&gt;&lt;p&gt;&lt;a href=&quot;https://medium.com/oracledevs/leverage-information-chunking-to-scale-your-java-library-package-design-fcedf64af434&quot;&gt;Leverage Information Chunking to scale your Java library package design&lt;/a&gt; was originally published in &lt;a href=&quot;https://medium.com/oracledevs&quot;&gt;Oracle Developers&lt;/a&gt; on Medium, where people are continuing the conversation by highlighting and responding to this story.&lt;/p&gt;</description>
	<pubDate>Mon, 28 Jan 2019 18:35:17 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Specification Process IV: The Specification Committee Votes</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/om--jv9Up6M/eclipse-specification-process-iv-specification-committee-votes</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/om--jv9Up6M/eclipse-specification-process-iv-specification-committee-votes</link>
	<description>One key difference between Eclipse open source software projects and open source specification projects is that specification projects must be aligned with exactly one specification committee&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/om--jv9Up6M&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 21 Jan 2019 19:00:00 +0000</pubDate>
</item>

</channel>
</rss>
