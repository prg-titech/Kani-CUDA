#lang rosette
(require "lang.rkt")
(define res-f (lambda (in out nx ny nz ce cw cn cs ct cb cc) (:= int BLOCKSIZE (*/LS (block-dim 0) (block-dim 1))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int tid-x (thread-idx 0)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int tid-y (thread-idx 1)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:shared real smem (BLOCKSIZE)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int i (+/LS (*/LS (block-dim 0) (block-idx 0)) tid-x)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int j (+/LS (*/LS (block-dim 1) (block-idx 1)) tid-y)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int c (+/LS (*/LS j nx) i)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int c2 (+/LS (*/LS tid-y (block-dim 0)) tid-x)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int xy (*/LS nx ny)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (: int tb tc tt) (if (switch) (? (syncthreads) (void)) (syncthreads)) (= tt (in (+/LS c xy))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (= tc (in c)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (= tb tc) (if (switch) (? (syncthreads) (void)) (syncthreads)) (= (smem c2) tc) (if (switch) (? (syncthreads) (void)) (syncthreads)) (syncthreads) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= bool bw (&&/LS (eq?/LS tid-x 0) (!/LS (eq?/LS i 0)))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= bool be (&&/LS (eq?/LS tid-x (-/LS (block-dim 0) 1)) (!/LS (eq?/LS i (-/LS nx 1))))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= bool bn (&&/LS (eq?/LS tid-y 0) (!/LS (eq?/LS j 0)))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= bool bs (&&/LS (eq?/LS tid-y (-/LS (block-dim 1) 1)) (!/LS (eq?/LS j (-/LS ny 1))))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int sw (?: (eq?/LS i 0) c2 (-/LS c2 1))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int se (?: (eq?/LS i (-/LS nx 1)) c2 (+/LS c2 1))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int sn (?: (eq?/LS j 0) c2 (-/LS c2 (block-dim 0)))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int ss (?: (eq?/LS j (-/LS ny 1)) c2 (+/LS c2 (block-dim 0)))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (= (out c) (+/LS (*/LS cc tc) (*/LS cw (?: bw (in (-/LS c 1)) (smem sw))) (*/LS ce (?: be (in (+/LS c 1)) (smem se))) (*/LS cn (?: bn (in (-/LS c nx)) (smem sn))) (*/LS cs (?: bs (in (+/LS c nx)) (smem ss))) (*/LS cb tb) (*/LS ct tt))) (if (switch) (? (syncthreads) (void)) (syncthreads)) (+= c xy) (if (switch) (? (syncthreads) (void)) (syncthreads)) (:= int k 1) (if (switch) (? (syncthreads) (void)) (syncthreads)) (for- (: (</LS k (-/LS nz 1)) : (++ k)) (= tb tc) (= tc tt) (syncthreads) (= (smem c2) tt) (= tt (in (+/LS c xy))) (syncthreads) (= (out c) (+/LS (*/LS cc tc) (*/LS cw (?: bw (in (-/LS c 1)) (smem sw))) (*/LS ce (?: be (in (+/LS c 1)) (smem se))) (*/LS cn (?: bn (in (-/LS c nx)) (smem sn))) (*/LS cs (?: bs (in (+/LS c nx)) (smem ss))) (*/LS cb tb) (*/LS ct tt))) (syncthreads) (+= c xy)) (if (switch) (? (syncthreads) (void)) (syncthreads)) (= tb tc) (if (switch) (? (syncthreads) (void)) (syncthreads)) (= tc tt) (if (switch) (? (syncthreads) (void)) (syncthreads)) (= (smem c2) tt) (if (switch) (? (syncthreads) (void)) (syncthreads)) (syncthreads) (if (switch) (? (syncthreads) (void)) (syncthreads)) (= (out c) (+/LS (*/LS cc tc) (*/LS cw (?: bw (in (-/LS c 1)) (smem sw))) (*/LS ce (?: be (in (+/LS c 1)) (smem se))) (*/LS cn (?: bn (in (-/LS c nx)) (smem sn))) (*/LS cs (?: bs (in (+/LS c nx)) (smem ss))) (*/LS cb tb) (*/LS ct tt)))))
a
(for-each (lambda (e) (displayln e)) (optimize-barrier (parameterize ((switch #t)) (spec-opt res-f))))
