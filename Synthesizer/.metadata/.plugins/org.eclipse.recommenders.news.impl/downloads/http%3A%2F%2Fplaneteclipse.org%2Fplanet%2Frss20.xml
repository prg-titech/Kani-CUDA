<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>Donald Raab: EC by Example: Collectors2</title>
	<guid isPermaLink="false">https://medium.com/p/bb5cd450d876</guid>
	<link>https://medium.com/@donraab/ec-by-example-collectors2-bb5cd450d876?source=rss-df39b86e9f04------2</link>
	<description>&lt;p&gt;Learn how to transition to &lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;Eclipse Collections&lt;/a&gt; types using &lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/eclipse-collections/src/main/java/org/eclipse/collections/impl/collector/Collectors2.java&quot;&gt;&lt;em&gt;Collectors2&lt;/em&gt;&lt;/a&gt;&lt;em&gt; &lt;/em&gt;with any Java &lt;em&gt;Stream&lt;/em&gt;.&lt;/p&gt;&lt;figure&gt;&lt;img alt=&quot;&quot; src=&quot;https://cdn-images-1.medium.com/max/1024/1*gJXYpVwie10nKEq4wzjUjg.png&quot; /&gt;Visualizing Collectors2&lt;/figure&gt;&lt;h3&gt;Anatomy of a Collector&lt;/h3&gt;&lt;p&gt;One of the many great additions to Java 8 was the interface &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html&quot;&gt;&lt;em&gt;Collector&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. &lt;/em&gt;A &lt;em&gt;Collector&lt;/em&gt; can be used with the &lt;em&gt;collect&lt;/em&gt; method on the &lt;em&gt;Stream&lt;/em&gt; interface. The &lt;em&gt;collect&lt;/em&gt; method used with a &lt;em&gt;Collector&lt;/em&gt; will allow you to reduce a &lt;em&gt;Stream&lt;/em&gt; to any type you want. Java 8 included a set of stock &lt;em&gt;Collector&lt;/em&gt; implementations which are part of the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collectors.html&quot;&gt;&lt;em&gt;Collectors&lt;/em&gt;&lt;/a&gt; utility class. &lt;a href=&quot;http://www.eclipse.org/collections/&quot;&gt;Eclipse Collections&lt;/a&gt; includes another set of &lt;em&gt;Collector&lt;/em&gt; implementations that return Eclipse Collections types. The name of the utility class in Eclipse Collections is &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/collector/Collectors2.html&quot;&gt;&lt;em&gt;Collectors2&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;So what is a &lt;em&gt;Collector&lt;/em&gt;? Let’s take a look at the &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/stream/Collector.html&quot;&gt;interface&lt;/a&gt; to find out. There are five public instance methods on a &lt;em&gt;Collector&lt;/em&gt;.&lt;/p&gt;&lt;ul&gt;&lt;li&gt;supplier → Supplier&amp;lt;A&amp;gt;&lt;/li&gt;&lt;li&gt;accumulator → BiConsumer&amp;lt;A, T&amp;gt;&lt;/li&gt;&lt;li&gt;combiner → BinaryOperator&amp;lt;A&amp;gt;&lt;/li&gt;&lt;li&gt;finisher → Function&amp;lt;A, R&amp;gt;&lt;/li&gt;&lt;li&gt;characteristics → Set&amp;lt;Characteristics&amp;gt; → Enum(&lt;strong&gt;CONCURRENT&lt;/strong&gt;, &lt;strong&gt;UNORDERED&lt;/strong&gt;, &lt;strong&gt;IDENTITY_FINISH&lt;/strong&gt;)&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;There are also two static &lt;em&gt;of&lt;/em&gt; methods on Collector which can be used to easily create your own Collector implementations.&lt;/p&gt;&lt;p&gt;So let’s see how we can create a Collector to better understand what these individual components are used for.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void collector()&lt;br /&gt;{&lt;br /&gt;    Collector&amp;lt;String, Set&amp;lt;String&amp;gt;, Set&amp;lt;String&amp;gt;&amp;gt; toCOWASet =&lt;br /&gt;            Collector.&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;                    HashSet::new,              &lt;em&gt;// supplier&lt;br /&gt;                    &lt;/em&gt;Set::add,                  &lt;em&gt;// accumulator&lt;br /&gt;                    &lt;/em&gt;(set1, set2) -&amp;gt; {          &lt;em&gt;// combiner&lt;br /&gt;                        &lt;/em&gt;set1.addAll(set2);&lt;br /&gt;                        return set1;&lt;br /&gt;                    },&lt;br /&gt;                    CopyOnWriteArraySet::new); &lt;em&gt;// finisher&lt;br /&gt;    &lt;/em&gt;List&amp;lt;String&amp;gt; strings = Arrays.&lt;em&gt;asList&lt;/em&gt;(&lt;strong&gt;&quot;a&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;b&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;c&quot;&lt;/strong&gt;);&lt;br /&gt;    Set&amp;lt;String&amp;gt; set =&lt;br /&gt;            strings.stream().collect(toCOWASet);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(new HashSet&amp;lt;&amp;gt;(strings), set);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Here I use the static &lt;em&gt;of&lt;/em&gt; method which takes five parameters. I leave the var arg’d final parameter for characteristics empty here. The &lt;em&gt;supplier&lt;/em&gt; here creates a new &lt;em&gt;HashSet&lt;/em&gt;. The &lt;em&gt;accumulator&lt;/em&gt; is used to specify what operation to apply on the object created using the &lt;em&gt;supplier&lt;/em&gt;. The items in the &lt;em&gt;Stream&lt;/em&gt; will be passed to the &lt;em&gt;add&lt;/em&gt; method of the &lt;em&gt;Set&lt;/em&gt;. The &lt;em&gt;combiner&lt;/em&gt; is used to specify how collections should be merged in the case where a &lt;em&gt;parallelStream&lt;/em&gt; is used. I cannot use a method reference for the combiner here because one of the collections must be returned, and the &lt;em&gt;addAll&lt;/em&gt; method on Collection returns a &lt;em&gt;boolean&lt;/em&gt;. Finally, the &lt;em&gt;finisher&lt;/em&gt; coverts the final result to a &lt;em&gt;CopyOnWriteArraySet&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;Building a reusable Collector&lt;/h3&gt;&lt;p&gt;The &lt;em&gt;Collector&lt;/em&gt; example above would not be very useful, and would be a rather verbose way to convert a &lt;em&gt;List&amp;lt;String&amp;gt;&lt;/em&gt; to a &lt;em&gt;CopyOnWriteArraySet&amp;lt;String&amp;gt;&lt;/em&gt;. It would be much more useful if it could handle any type instead of just &lt;em&gt;String&lt;/em&gt;. This can be done easily by moving the construction of this &lt;em&gt;Collector&lt;/em&gt; to a static method and giving it a name like &lt;em&gt;toCopyOnWriteArraySet&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;public static &amp;lt;T&amp;gt; Collector&amp;lt;T, ?, Set&amp;lt;T&amp;gt;&amp;gt; toCopyOnWriteArraySet()&lt;br /&gt;{&lt;br /&gt;    return Collector.&amp;lt;T, Set&amp;lt;T&amp;gt;, Set&amp;lt;T&amp;gt;&amp;gt;&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;            HashSet::new,              &lt;em&gt;// supplier&lt;br /&gt;            &lt;/em&gt;Set::add,                  &lt;em&gt;// accumulator&lt;br /&gt;            &lt;/em&gt;(set1, set2) -&amp;gt; {          &lt;em&gt;// combiner&lt;br /&gt;                &lt;/em&gt;set1.addAll(set2);&lt;br /&gt;                return set1;&lt;br /&gt;            },&lt;br /&gt;            CopyOnWriteArraySet::new,  &lt;em&gt;// finisher&lt;br /&gt;            &lt;/em&gt;Collector.Characteristics.&lt;strong&gt;&lt;em&gt;UNORDERED&lt;/em&gt;&lt;/strong&gt;); &lt;em&gt;// characteristics&lt;br /&gt;&lt;/em&gt;}&lt;br /&gt;&lt;br /&gt;@Test&lt;br /&gt;public void reusableCollector()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;String&amp;gt; strings = Arrays.&lt;em&gt;asList&lt;/em&gt;(&lt;strong&gt;&quot;a&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;b&quot;&lt;/strong&gt;, &lt;strong&gt;&quot;c&quot;&lt;/strong&gt;);&lt;br /&gt;    Set&amp;lt;String&amp;gt; set1 =&lt;br /&gt;            strings.stream().collect(&lt;em&gt;toCopyOnWriteArraySet&lt;/em&gt;());&lt;br /&gt;    Verify.&lt;em&gt;assertInstanceOf&lt;/em&gt;(CopyOnWriteArraySet.class, set1);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(new HashSet&amp;lt;&amp;gt;(strings), set1);&lt;br /&gt;&lt;br /&gt;    List&amp;lt;Integer&amp;gt; integers = Arrays.&lt;em&gt;asList&lt;/em&gt;(1, 2, 3);&lt;br /&gt;    Set&amp;lt;Integer&amp;gt; set2 =&lt;br /&gt;            integers.stream().collect(&lt;em&gt;toCopyOnWriteArraySet&lt;/em&gt;());&lt;br /&gt;    Verify.&lt;em&gt;assertInstanceOf&lt;/em&gt;(CopyOnWriteArraySet.class, set2);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(new HashSet&amp;lt;&amp;gt;(integers), set2);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;Now I’ve created a reusable &lt;em&gt;Collector&lt;/em&gt; that can be used with a &lt;em&gt;Stream&lt;/em&gt; of any type. I’ve additionally specified a &lt;em&gt;Collector.Characteristics&lt;/em&gt; in the reusable implementation. These characteristics can be used by the &lt;em&gt;Stream&lt;/em&gt; collect method to optimize the reduction implementation. Since I am accumulating to a &lt;em&gt;Set&lt;/em&gt; which is unordered in this case, it probably makes sense to use the &lt;strong&gt;UNORDERED&lt;/strong&gt; characteristic.&lt;/p&gt;&lt;h3&gt;Filtering with Collectors2&lt;/h3&gt;&lt;p&gt;In order to filter with &lt;a href=&quot;https://www.eclipse.org/collections/javadoc/9.2.0/org/eclipse/collections/impl/collector/Collectors2.html&quot;&gt;&lt;em&gt;Collectors2&lt;/em&gt;&lt;/a&gt;, you will need three things:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A &lt;em&gt;select&lt;/em&gt;, &lt;em&gt;reject&lt;/em&gt;, or &lt;em&gt;partition&lt;/em&gt; &lt;em&gt;Collector&lt;/em&gt;&lt;/li&gt;&lt;li&gt;A &lt;em&gt;Predicate&lt;/em&gt;&lt;/li&gt;&lt;li&gt;A target collection &lt;em&gt;Supplier&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Here are examples using &lt;em&gt;select&lt;/em&gt;, &lt;em&gt;reject&lt;/em&gt;, and &lt;em&gt;partition&lt;/em&gt; with Collectors2.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void filtering()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = Arrays.&lt;em&gt;asList&lt;/em&gt;(1, 2, 3, 4, 5);&lt;br /&gt;    Predicate&amp;lt;Integer&amp;gt; evens = i -&amp;gt; i % 2 == 0;&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; selectedList = list.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;select&lt;/em&gt;(evens, Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty));&lt;br /&gt;    MutableSet&amp;lt;Integer&amp;gt; selectedSet = list.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;select&lt;/em&gt;(evens, Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty));&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; rejectedList = list.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;reject&lt;/em&gt;(evens, Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty));&lt;br /&gt;    MutableSet&amp;lt;Integer&amp;gt; rejectedSet = list.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;reject&lt;/em&gt;(evens, Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty));&lt;br /&gt;&lt;br /&gt;    PartitionList&amp;lt;Integer&amp;gt; partitionList = list.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;partition&lt;/em&gt;(evens, PartitionFastList::new));&lt;br /&gt;    PartitionSet&amp;lt;Integer&amp;gt; partitionSet = list.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;partition&lt;/em&gt;(evens, PartitionUnifiedSet::new));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(selectedList, partitionList.getSelected());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(rejectedList, partitionList.getRejected());&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(selectedSet, partitionSet.getSelected());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(rejectedSet, partitionSet.getRejected());&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Transforming with Collectors2&lt;/h3&gt;&lt;p&gt;There are several methods which provide different transformations using Collectors2. The most basic transformation is available through the &lt;em&gt;collect&lt;/em&gt; method. In order to use &lt;em&gt;collect&lt;/em&gt;, you will need two things:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;A &lt;em&gt;Function&lt;/em&gt;&lt;/li&gt;&lt;li&gt;A target collection &lt;em&gt;Supplier&lt;/em&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;The other transforming Collectors I will demonstrate below are &lt;em&gt;makeString&lt;/em&gt;, &lt;em&gt;zip&lt;/em&gt;, &lt;em&gt;zipWithIndex&lt;/em&gt;, &lt;em&gt;chunk&lt;/em&gt;, and &lt;em&gt;flatCollect&lt;/em&gt;.&lt;/p&gt;&lt;pre&gt;@Test&lt;br /&gt;public void transforming()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; list = Arrays.&lt;em&gt;asList&lt;/em&gt;(1, 2, 3, 4, 5);&lt;br /&gt;    MutableList&amp;lt;String&amp;gt; strings = list.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;collect&lt;/em&gt;(Object::toString,&lt;br /&gt;                    Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty));&lt;br /&gt;&lt;br /&gt;    String string = list.stream().collect(Collectors2.&lt;em&gt;makeString&lt;/em&gt;());&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(string, strings.makeString());&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Pair&amp;lt;Integer, String&amp;gt;&amp;gt; zipped =&lt;br /&gt;            list.stream().collect(Collectors2.&lt;em&gt;zip&lt;/em&gt;(strings));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Tuples.&lt;em&gt;pair&lt;/em&gt;(1, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;), zipped.getFirst());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(Tuples.&lt;em&gt;pair&lt;/em&gt;(5, &lt;strong&gt;&quot;5&quot;&lt;/strong&gt;), zipped.getLast());&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;ObjectIntPair&amp;lt;Integer&amp;gt;&amp;gt; zippedWithIndex =&lt;br /&gt;            list.stream().collect(Collectors2.&lt;em&gt;zipWithIndex&lt;/em&gt;());&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(Integer.&lt;em&gt;valueOf&lt;/em&gt;(1), 0),&lt;br /&gt;            zippedWithIndex.getFirst());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            PrimitiveTuples.&lt;em&gt;pair&lt;/em&gt;(Integer.&lt;em&gt;valueOf&lt;/em&gt;(5), 4),&lt;br /&gt;            zippedWithIndex.getLast());&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;MutableList&amp;lt;Integer&amp;gt;&amp;gt; chunked =&lt;br /&gt;            list.stream().collect(Collectors2.&lt;em&gt;chunk&lt;/em&gt;(2));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2), chunked.getFirst());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(5), chunked.getLast());&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; flattened = chunked.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;flatCollect&lt;/em&gt;(e -&amp;gt; e, Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty));&lt;br /&gt;&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(list, flattened);&lt;br /&gt;}&lt;/pre&gt;&lt;h3&gt;Converting with Collectors2&lt;/h3&gt;&lt;p&gt;There are two sets of converting &lt;em&gt;Collector&lt;/em&gt; implementations available in &lt;em&gt;Collectors2&lt;/em&gt;. One set converts to &lt;em&gt;MutableCollection&lt;/em&gt; types. The other converts to &lt;em&gt;ImmutableCollection&lt;/em&gt; types.&lt;/p&gt;&lt;h4&gt;Collectors converting to Mutable Collections&lt;/h4&gt;&lt;pre&gt;@Test&lt;br /&gt;public void convertingToMutable()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; source = Arrays.&lt;em&gt;asList&lt;/em&gt;(2, 1, 4, 3, 5);&lt;br /&gt;    MutableBag&amp;lt;Integer&amp;gt; bag = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toBag&lt;/em&gt;());&lt;br /&gt;    MutableSortedBag&amp;lt;Integer&amp;gt; sortedBag = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toSortedBag&lt;/em&gt;());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), bag);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            SortedBags.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), sortedBag);&lt;br /&gt;&lt;br /&gt;    MutableSet&amp;lt;Integer&amp;gt; set = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toSet&lt;/em&gt;());&lt;br /&gt;    MutableSortedSet&amp;lt;Integer&amp;gt; sortedSet = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toSortedSet&lt;/em&gt;());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Sets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), set);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            SortedSets.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), sortedSet);&lt;br /&gt;&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; list = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toList&lt;/em&gt;());&lt;br /&gt;    MutableList&amp;lt;Integer&amp;gt; sortedList = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toSortedList&lt;/em&gt;());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(2, 1, 4, 3, 5), list);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), sortedList);&lt;br /&gt;&lt;br /&gt;    MutableMap&amp;lt;String, Integer&amp;gt; map =&lt;br /&gt;            source.stream().limit(4).collect(&lt;br /&gt;                    Collectors2.&lt;em&gt;toMap&lt;/em&gt;(Object::toString, e -&amp;gt; e));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Maps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, 2, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, 1, &lt;strong&gt;&quot;4&quot;&lt;/strong&gt;, 4, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;, 3), &lt;br /&gt;            map);&lt;br /&gt;&lt;br /&gt;    MutableBiMap&amp;lt;String, Integer&amp;gt; biMap =&lt;br /&gt;            source.stream().limit(4).collect(&lt;br /&gt;                    Collectors2.&lt;em&gt;toBiMap&lt;/em&gt;(Object::toString, e -&amp;gt; e));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            BiMaps.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, 2, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, 1, &lt;strong&gt;&quot;4&quot;&lt;/strong&gt;, 4, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;, 3), &lt;br /&gt;            biMap);&lt;br /&gt;}&lt;/pre&gt;&lt;h4&gt;Collectors converting to Immutable Collections&lt;/h4&gt;&lt;pre&gt;@Test&lt;br /&gt;public void convertingToImmutable()&lt;br /&gt;{&lt;br /&gt;    List&amp;lt;Integer&amp;gt; source = Arrays.&lt;em&gt;asList&lt;/em&gt;(2, 1, 4, 3, 5);&lt;br /&gt;    ImmutableBag&amp;lt;Integer&amp;gt; bag = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toImmutableBag&lt;/em&gt;());&lt;br /&gt;    ImmutableSortedBag&amp;lt;Integer&amp;gt; sortedBag = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toImmutableSortedBag&lt;/em&gt;());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Bags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), bag);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            SortedBags.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), sortedBag);&lt;br /&gt;&lt;br /&gt;    ImmutableSet&amp;lt;Integer&amp;gt; set = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toImmutableSet&lt;/em&gt;());&lt;br /&gt;    ImmutableSortedSet&amp;lt;Integer&amp;gt; sortedSet = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toImmutableSortedSet&lt;/em&gt;());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Sets.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), set);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            SortedSets.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), sortedSet);&lt;br /&gt;&lt;br /&gt;    ImmutableList&amp;lt;Integer&amp;gt; list = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toImmutableList&lt;/em&gt;());&lt;br /&gt;    ImmutableList&amp;lt;Integer&amp;gt; sortedList = source.stream().collect(&lt;br /&gt;            Collectors2.&lt;em&gt;toImmutableSortedList&lt;/em&gt;());&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(2, 1, 4, 3, 5), list);&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(1, 2, 3, 4, 5), sortedList);&lt;br /&gt;&lt;br /&gt;    ImmutableMap&amp;lt;String, Integer&amp;gt; map =&lt;br /&gt;            source.stream().limit(4).collect(&lt;br /&gt;                    Collectors2.&lt;em&gt;toImmutableMap&lt;/em&gt;(&lt;br /&gt;                            Object::toString, e -&amp;gt; e));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            Maps.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, 2, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, 1, &lt;strong&gt;&quot;4&quot;&lt;/strong&gt;, 4, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;, 3),&lt;br /&gt;            map);&lt;br /&gt;&lt;br /&gt;    ImmutableBiMap&amp;lt;String, Integer&amp;gt; biMap =&lt;br /&gt;            source.stream().limit(4).collect(&lt;br /&gt;                    Collectors2.&lt;em&gt;toImmutableBiMap&lt;/em&gt;(&lt;br /&gt;                            Object::toString, e -&amp;gt; e));&lt;br /&gt;    Assert.&lt;em&gt;assertEquals&lt;/em&gt;(&lt;br /&gt;            BiMaps.&lt;strong&gt;&lt;em&gt;immutable&lt;/em&gt;&lt;/strong&gt;.with(&lt;strong&gt;&quot;2&quot;&lt;/strong&gt;, 2, &lt;strong&gt;&quot;1&quot;&lt;/strong&gt;, 1, &lt;strong&gt;&quot;4&quot;&lt;/strong&gt;, 4, &lt;strong&gt;&quot;3&quot;&lt;/strong&gt;, 3),&lt;br /&gt;            biMap);&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The &lt;em&gt;Collector&lt;/em&gt; implementations that convert to &lt;em&gt;ImmutableCollection&lt;/em&gt; types use the final parameter of the &lt;em&gt;Collector&lt;/em&gt; interface: &lt;em&gt;finisher&lt;/em&gt;. Here is the example of the &lt;em&gt;Collector&lt;/em&gt; implementation for &lt;em&gt;toImmutableList&lt;/em&gt;().&lt;/p&gt;&lt;pre&gt;public static &amp;lt;T&amp;gt; Collector&amp;lt;T, ?, ImmutableList&amp;lt;T&amp;gt;&amp;gt; toImmutableList()&lt;br /&gt;{&lt;br /&gt;    return Collector.&amp;lt;T, MutableList&amp;lt;T&amp;gt;, ImmutableList&amp;lt;T&amp;gt;&amp;gt;&lt;em&gt;of&lt;/em&gt;(&lt;br /&gt;            Lists.&lt;strong&gt;&lt;em&gt;mutable&lt;/em&gt;&lt;/strong&gt;::empty,      // supplier&lt;br /&gt;            MutableList::add,          // accumulator&lt;br /&gt;            MutableList::withAll,      // combiner&lt;br /&gt;            MutableList::toImmutable,  // finisher&lt;br /&gt;            &lt;strong&gt;&lt;em&gt;EMPTY_CHARACTERISTICS&lt;/em&gt;&lt;/strong&gt;);    // characteristics&lt;br /&gt;}&lt;/pre&gt;&lt;p&gt;The &lt;em&gt;finisher&lt;/em&gt; here is the &lt;em&gt;MutableList::toImmutable&lt;/em&gt;. This is the final step that converts the &lt;em&gt;MutableCollection&lt;/em&gt; that is accumulated into an &lt;em&gt;ImmutableCollection&lt;/em&gt;.&lt;/p&gt;&lt;h3&gt;Eclipse Collections API vs. Collectors2&lt;/h3&gt;&lt;p&gt;My preference is always to use the Eclipse Collections API directly if I can. If I need to operate on a JDK Collection type or if I am only given a &lt;em&gt;Stream&lt;/em&gt;, then I will use &lt;em&gt;Collectors2&lt;/em&gt;. As you can see in the examples above, Collectors2 is a natural gateway to the Eclipse Collections types and their functional, fluent, friendly and fun APIs.&lt;/p&gt;&lt;p&gt;Check out this &lt;a href=&quot;http://eclipse.github.io/eclipse-collections-kata/api-design&quot;&gt;presentation&lt;/a&gt; to learn more about the origins, design and evolution of the Eclipse Collections API.&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;Eclipse Collections&lt;/em&gt;&lt;/a&gt;&lt;em&gt; is open for &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections/blob/master/CONTRIBUTING.md&quot;&gt;&lt;em&gt;contributions&lt;/em&gt;&lt;/a&gt;&lt;em&gt;. If you like the library, you can let us know by starring it on &lt;/em&gt;&lt;a href=&quot;https://github.com/eclipse/eclipse-collections&quot;&gt;&lt;em&gt;GitHub&lt;/em&gt;&lt;/a&gt;&lt;em&gt;.&lt;/em&gt;&lt;/p&gt;&lt;img height=&quot;1&quot; src=&quot;https://medium.com/_/stat?event=post.clientViewed&amp;amp;referrerSource=full_rss&amp;amp;postId=bb5cd450d876&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Mon, 23 Jul 2018 02:26:08 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: New Working Group and Charter at the Eclipse Foundation: OpenMobility</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/QcxgVMTtlXc/openmobility_charter.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/QcxgVMTtlXc/openmobility_charter.php</link>
	<description>OpenMobility will drive the evolution and broad adoption of mobility modelling and simulation technologies.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/QcxgVMTtlXc&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 20 Jul 2018 17:00:00 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: RHAMT Eclipse Plugin 4.1.0.Final has been released!</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/rhamt_4.1.0.Final_release.html</guid>
	<link>https://tools.jboss.org/blog/rhamt_4.1.0.Final_release.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Happy to announce version 4.1.0.Final of the Red Hat Application Migration Toolkit (RHAMT) is now available.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;getting-started&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#getting-started&quot;&gt;&lt;/a&gt;Getting Started&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Downloads available through JBoss Central and from the &lt;a href=&quot;http://download.jboss.org/jbosstools/photon/stable/updates/rhamt/&quot;&gt;update site&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;rhamt-in-a-nutshel&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#rhamt-in-a-nutshel&quot;&gt;&lt;/a&gt;RHAMT in a Nutshel&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;RHAMT is an application migration and assessment tool. The migrations supported include application platform upgrades,
      migrations to a cloud-native deployment environment, and also migrations from several commercial products to the
      Red Hat JBoss Enterprise Application Platform.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is New?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;eclipse-photon&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#eclipse-photon&quot;&gt;&lt;/a&gt;Eclipse Photon&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The tooling now targets Eclipse Photon.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Photon&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/4_1_0_final/eclipse_photon.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;ignoring-patterns&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#ignoring-patterns&quot;&gt;&lt;/a&gt;Ignoring Patterns&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Specify locations of files to exclude from analysis (using regular expressions).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Ignore Patterns&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/4_1_0_final/ignore_pattern.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;external-report&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#external-report&quot;&gt;&lt;/a&gt;External Report&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The generated report has been moved out of Eclipse and into the browser.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Report View&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/4_1_0_final/report_browser.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;improved-ruleset-schema&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#improved-ruleset-schema&quot;&gt;&lt;/a&gt;Improved Ruleset Schema&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The XML ruleset schema has been relaxed providing flexible rule structures.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Schema&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/4_1_0_final/ruleset_source.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;custom-severities&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#custom-severities&quot;&gt;&lt;/a&gt;Custom Severities&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Custom severities are now included in the Issue Explorer.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Custom Category&quot; src=&quot;http://tools.jboss.org/blog/images/rhamt/4_1_0_final/custom_category.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;stability&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#stability&quot;&gt;&lt;/a&gt;Stability&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A good amount of time has been spent on ensuring the tooling functions consistently across Windows, OSX, and Linux.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more detailed information &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_application_migration_toolkit/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our goal is to make the RHAMT tooling easy to use. We look forward to your feedback and comments!&lt;br /&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Have fun!&lt;br /&gt;
      John Steele&lt;br /&gt;
      &lt;a href=&quot;https://github.com/johnsteele/&quot;&gt;github/johnsteele&lt;/a&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Wed, 18 Jul 2018 12:06:03 +0000</pubDate>
</item>
<item>
	<title>JBoss Tools Team: JBoss Tools and Red Hat Developer Studio for Eclipse Photon</title>
	<guid isPermaLink="true">https://tools.jboss.org/blog/12.0.0.ga-for-photon.html</guid>
	<link>https://tools.jboss.org/blog/12.0.0.ga-for-photon.html</link>
	<description>&lt;div&gt;&lt;div id=&quot;preamble&quot;&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tools.jboss.org/downloads/jbosstools/photon/4.6.0.Final.html&quot;&gt;JBoss Tools 4.6.0&lt;/a&gt; and &lt;a href=&quot;https://tools.jboss.org/downloads/devstudio/photon/12.0.0.GA.html&quot;&gt;Red Hat Developer Studio 12.0&lt;/a&gt; for Eclipse Photon are here waiting for you. Check it out!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;devstudio12&quot; src=&quot;https://tools.jboss.org/blog/images/devstudio12.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;installation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#installation&quot;&gt;&lt;/a&gt;Installation&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Red Hat Developer Studio comes with everything pre-bundled in its installer. Simply download it from our &lt;a href=&quot;https://developers.redhat.com/products/devstudio/overview/&quot;&gt;Red Hat Developer product page&lt;/a&gt; and run it like this:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;java -jar devstudio-&amp;lt;installername&amp;gt;.jar&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;JBoss Tools or Bring-Your-Own-Eclipse (BYOE) Developer Studio require a bit more:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This release requires at least Eclipse 4.8 (Photon) but we recommend
      using the latest &lt;a href=&quot;http://www.eclipse.org/downloads/packages/eclipse-ide-java-ee-developers/photonr&quot;&gt;Eclipse 4.8 Photon JEE Bundle&lt;/a&gt; since then you get most of the dependencies preinstalled.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once you have installed Eclipse, you can either find us on the Eclipse Marketplace under &quot;JBoss Tools&quot; or &quot;Red Hat Developer Studio&quot;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For JBoss Tools, you can also use our update site directly.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;literalblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre&gt;http://download.jboss.org/jbosstools/photon/stable/updates/&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-new&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-new&quot;&gt;&lt;/a&gt;What is new?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Our main focus for this release was on adoption of Java10, improvements for container based development and bug fixing.
      Eclipse Photon itself has &lt;a href=&quot;https://www.youtube.com/watch?v=gDAb_iyO5Fc&amp;amp;list=PLy7t4z5SYNaQjVGIS9YUfZzFQpNFYpCny&quot;&gt;a lot of new cool stuff&lt;/a&gt; but let me highlight just a few updates in both Eclipse Photon and JBoss Tools plugins that I think are worth mentioning.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;openshift-3&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#openshift-3&quot;&gt;&lt;/a&gt;OpenShift 3&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;enhanced-spring-boot-support-for-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#enhanced-spring-boot-support-for-server-adapter&quot;&gt;&lt;/a&gt;Enhanced Spring Boot support for server adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Spring Boot runtime was already supported by the OpenShift server adapter. However, it has one major limitation: files and
      resources were synchronized between the local workstation and the remote pod(s) only for the main project. If your Spring Boot
      application had dependencies that were present in the local workspace, any change to a file or resource of one of these dependencies
      was not handled. This is not true anymore.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;server-tools&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#server-tools&quot;&gt;&lt;/a&gt;Server tools&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;wildfly-13-server-adapter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#wildfly-13-server-adapter&quot;&gt;&lt;/a&gt;Wildfly 13 Server Adapter&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A server adapter has been added to work with Wildfly 13. It adds support for Servlet 4.0.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;fuse-tooling&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#fuse-tooling&quot;&gt;&lt;/a&gt;Fuse Tooling&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;camel-rest-dsl-from-wsdl-wizard&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#camel-rest-dsl-from-wsdl-wizard&quot;&gt;&lt;/a&gt;Camel Rest DSL from WSDL wizard&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is a new &lt;em&gt;&quot;Camel Rest DSL from WSDL&quot;&lt;/em&gt; wizard. This wizard wraps the &lt;a href=&quot;https://github.com/jboss-fuse/wsdl2rest&quot;&gt;wsdl2rest tool&lt;/a&gt; now included with the Fuse 7 distribution, which
      takes a WSDL file for a SOAP-based (JAX-WS) web service and generates a combination of CXF-generated code and a Camel REST DSL route to make it accessible using REST operations.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To start, you need an existing Fuse Integration project in your workspace and access to the WSDL for the SOAP service. Then use
      &lt;em&gt;File→New→Other…​&lt;/em&gt; and select &lt;em&gt;Red Hat Fuse→Camel Rest DSL from WSDL&lt;/em&gt; wizard.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On the first page of the wizard, select your WSDL and the Fuse Integration project in which to generate the Java code and Camel configuration.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;SOAP to REST Wizard page 1&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/wsdl2rest-wizard-page-one.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;On the second page, you can customize the Java folder path for your generated classes, the folder for the generated Camel file, plus any customization for the SOAP service
      address and destination REST service address.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;SOAP to REST Wizard page 2&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/wsdl2rest-wizard-page-two.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Click &lt;em&gt;Finish&lt;/em&gt; and the new Camel configuration and associated Java code are generated in your project. The wizard determines whether your project is Blueprint,
      Spring, or Spring Boot based, and it creates the corresponding artifacts without requiring any additional input. When the wizard is finished, you can open your
      new Camel file in the Fuse Tooling Route Editor to view what it created.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Tooling editor Rest Tab&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/fuse-editor-rest-tab-no-properties.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;That brings us to another new functionality, the REST tab in the Fuse Tooling Route Editor.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;camel-editor-rest-tab&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#camel-editor-rest-tab&quot;&gt;&lt;/a&gt;Camel Editor REST tab&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Fuse Tooling Route Editor provides a new &lt;em&gt;REST&lt;/em&gt; tab. For this release, the contents of this tab is read-only and includes the following information:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Details for the REST Configuration element including the component (jetty, netty, servlet, etc.), the context path, the port, binding mode (JSON, XML, etc.), and host. There is only one REST Configuration element.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;A list of REST elements that collect REST operations. A configuration can have more than one REST element. Each REST element has an associated property page that displays additional details such as the path and the data it consumes or produces.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Tooling Rest Elements Properties View&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/fuse-editor-rest-tab-rest-element-properties.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;A list of REST operations for the selected REST element. Each of the operations has an associated property page that provides details such as the URI and output type.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Fuse Tooling Rest Operations Properties View&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/fuse-editor-rest-tab-rest-operation-properties.jpg&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For this release, the REST tab is read-only. If you want to edit the REST DSL, use the Route Editor Source tab. When you make changes and save them in the Source tab, the
      REST tab refreshes to show your updates.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;camel-uri-completion-with-xml-dsl&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#camel-uri-completion-with-xml-dsl&quot;&gt;&lt;/a&gt;Camel URI completion with XML DSL&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As announced &lt;a href=&quot;https://developers.redhat.com/blog/2018/01/31/apache-camel-uri-completion-eclipse-xml-editor/&quot;&gt;here&lt;/a&gt;, it was already possible to have Camel URI completion with XML DSL in the source tab of the Camel Route editor by installing the &lt;a href=&quot;https://github.com/camel-tooling/camel-lsp-client-eclipse&quot;&gt;Language Support for Apache Camel&lt;/a&gt; in your IDE.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This feature is now installed by default with Fuse Tooling!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;Camel URI completion in source tab of Camel Editor&quot; src=&quot;https://tools.jboss.org/documentation/whatsnew/fusetools/images/completionSourceEditor.gif&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;maven&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#maven&quot;&gt;&lt;/a&gt;Maven&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;maven-support-updated-to-m2e-1-9-1&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#maven-support-updated-to-m2e-1-9-1&quot;&gt;&lt;/a&gt;Maven support updated to M2E 1.9.1&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Maven support is based on Eclipse M2E 1.9.1, bringing the following features:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;advanced-classpath-isolation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#advanced-classpath-isolation&quot;&gt;&lt;/a&gt;Advanced classpath isolation&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Thanks to Eclipse Photon, there are new two different classpathes, the main and the test classpath.
      The main classes will now no longer see the test classes and dependencies&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;embedded-maven-runtime&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#embedded-maven-runtime&quot;&gt;&lt;/a&gt;Embedded Maven runtime&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The embedded Maven runtime is now based on Apache Maven 3.5.3.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;archetype-catalog-management&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#archetype-catalog-management&quot;&gt;&lt;/a&gt;Archetype catalog management&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;It is now possible to disable an archetype catalog.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;java-9-10-support&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#java-9-10-support&quot;&gt;&lt;/a&gt;Java 9/10 support&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Support for Java 9/10 has been improved: bugs fixes, better handling of module path.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;java-developement-tools-jdt&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#java-developement-tools-jdt&quot;&gt;&lt;/a&gt;Java Developement Tools (JDT)&lt;/h3&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;support-for-java-10&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#support-for-java-10&quot;&gt;&lt;/a&gt;Support for Java™ 10&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;quick-fix-to-change-project-compliance-and-jre-to-10&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#quick-fix-to-change-project-compliance-and-jre-to-10&quot;&gt;&lt;/a&gt;Quick fix to change project compliance and JRE to 10&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A quick fix &lt;strong&gt;Change project compliance and JRE to 10&lt;/strong&gt; is provided to quickly change the current project to be compatible with Java 10.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;quickfix change compliance 10&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/quickfix-change-compliance-10.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-editor&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#java-editor&quot;&gt;&lt;/a&gt;Java Editor&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;quick-fix-to-add-nonnullbydefault-to-packages&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#quick-fix-to-add-nonnullbydefault-to-packages&quot;&gt;&lt;/a&gt;Quick Fix to add @NonNullByDefault to packages&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new quick fix is offered to fix issues that are reported when the Missing &amp;amp;apos@NonNullByDefault&amp;amp;apos annotation on package warning is enabled.
      If the package already has a &lt;code&gt;&lt;code&gt;package-info.java&lt;/code&gt;&lt;/code&gt;, the quick fix can be invoked from the editor:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;add nnbd existing packageinfo&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/add-nnbd-existing-packageinfo.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Otherwise, the quick fix must be invoked from the problems view, and will create a &lt;code&gt;&lt;code&gt;package-info.java&lt;/code&gt;&lt;/code&gt; with the required annotation:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;add nnbd create packageinfo&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/add-nnbd-create-packageinfo.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When invoked from the problems view, both variations of the quick fix can fix the problem for multiple packages simultaneously.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;navigate-to-switch-statement&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#navigate-to-switch-statement&quot;&gt;&lt;/a&gt;Navigate to &amp;amp;aposswitch&amp;amp;apos statement&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can now &lt;strong&gt;Ctrl+click&lt;/strong&gt; or use &lt;strong&gt;Open Declaration (F3)&lt;/strong&gt; on case or default keywords to quickly navigate to the beginning of the switch statement.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;navigate to switch&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/navigate-to-switch.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;escape-non-ascii-characters-when-pasting-into-a-string-literal&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#escape-non-ascii-characters-when-pasting-into-a-string-literal&quot;&gt;&lt;/a&gt;Escape non-ASCII characters when pasting into a string literal&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;Java &amp;gt; Editor &amp;gt; Typing &amp;gt; Escape text when pasting into a string literal&lt;/strong&gt; preference option now has a suboption &lt;strong&gt;Use Unicode escape syntax for non-ASCII characters&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;escape non ascii settings&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/escape-non-ascii-settings.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When enabled, characters outside the visible ASCII range will be replaced by unicode escape sequences when pasted into a string:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;escape non ascii example&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/escape-non-ascii-example.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;improved-java-syntax-coloring-in-the-dark-theme&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#improved-java-syntax-coloring-in-the-dark-theme&quot;&gt;&lt;/a&gt;Improved Java syntax coloring in the dark theme&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To improve readability in the dark theme, bold style usage has been reduced and some colors that were too close to each other have been altered.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;java syntax dark&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/java-syntax-dark.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;improved-coloring-of-links-in-code-element-information-in-the-dark-theme&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#improved-coloring-of-links-in-code-element-information-in-the-dark-theme&quot;&gt;&lt;/a&gt;Improved coloring of links in code element information in the dark theme&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The colors of links in code element information control now takes the color settings of the &lt;strong&gt;Hyperlink text color&lt;/strong&gt; and the &lt;strong&gt;Active hyperlink text color&lt;/strong&gt; from the &lt;strong&gt;Colors &amp;amp; Fonts&lt;/strong&gt; preference page into account. The readability in the dark theme has been improved a lot by this.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;element info before&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/element_info_before.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;element info after&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/element_info_after.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;improved-coloring-of-inherited-members-in-the-quick-outline-in-the-dark-theme&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#improved-coloring-of-inherited-members-in-the-quick-outline-in-the-dark-theme&quot;&gt;&lt;/a&gt;Improved coloring of inherited members in the Quick Outline in the dark theme&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The Eclipse default dark theme now includes styling of inherited members in JDT’s &lt;strong&gt;Quick Outline&lt;/strong&gt;. This improves readability in the dark theme a lot. The color can be configured via the &lt;strong&gt;Java &amp;gt; Inherited Members&lt;/strong&gt; color definition on the &lt;strong&gt;Colors and Fonts&lt;/strong&gt; preference page.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Before:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;inherited before&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/inherited_before.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;After:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;inherited after&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/inherited_after.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-views-and-dialogs&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#java-views-and-dialogs&quot;&gt;&lt;/a&gt;Java Views and Dialogs&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;test-sources&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#test-sources&quot;&gt;&lt;/a&gt;Test sources&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the &lt;strong&gt;Java Build Path&lt;/strong&gt; project settings, there is now an attribute &lt;strong&gt;Contains test sources&lt;/strong&gt; to configure that a source folder contains test sources.
      (Note: test sources must have their own output folder).
      Similarly, for projects and libraries there is an attribute &lt;strong&gt;Visible only for test sources&lt;/strong&gt;.
      This setting also exists for classpath containers, and if it is set to &lt;strong&gt;Yes&lt;/strong&gt; for one of these, this value will be used for all contained libraries and projects.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;1 sourcefolder settings 521330&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/1-sourcefolder-settings-521330.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Test source folders and dependencies are shown with a darker icon in the build path settings, the package explorer and other locations.
      This can be disabled in &lt;strong&gt;Preferences &amp;gt; Java &amp;gt; Appearance&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;1a modified test icon preferences 530179&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/1a-modified-test-icon-preferences-530179.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Referenced projects can contain test sources and have test dependencies themselves.
      Usually, when test sources are compiled, the test code in projects on the build path will be visible.
      As this is not always desirable, it can be changed by setting the new build path attribute &lt;strong&gt;Without test code&lt;/strong&gt;, that is available for projects, to &lt;strong&gt;Yes&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;2 without test code 526858&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/2-without-test-code-526858.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Build path entries configured like this have a decoration [without test code] after the project name, which can be disabled in &lt;strong&gt;Preferences &amp;gt; General &amp;gt; Appearance &amp;gt; Label Decorations&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;2a without test code decorator 530179&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/2a-without-test-code-decorator-530179.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For each project, compilation is now done in two phases: First all main sources (which cannot see any test-code on the build-path) and then all test sources.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;3 visibilities 224708&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/3-visibilities-224708.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;As a consequence, if the project is a modular Java 9 project, test dependencies like JUnit can not be referenced in the &lt;code&gt;&lt;code&gt;module-info.java&lt;/code&gt;&lt;/code&gt;, as they will not be visible while compiling it.
      The solution used to handle this is the same, that Maven uses: When test dependencies are put on the classpath, the module being compiled will automatically be configured to read the unnamed module during the compilation of the test sources, so the test dependencies will be visible.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Of course, code completion will not suggest test code in main sources:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;4a completion in main 521331&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/4a-completion-in-main-521331.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are now two dynamic Java working sets &lt;strong&gt;Java Main Sources&lt;/strong&gt; and &lt;strong&gt;Java Test Sources&lt;/strong&gt; containing the source folders grouped according to value of the &lt;strong&gt;Contains test sources&lt;/strong&gt; attribute.
      This can for example be used to remove warnings in test sources from the problems view:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;5a problems view 521336&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/5a-problems-view-521336.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To achieve this, create a new filter that shows warnings for the &lt;strong&gt;Java Main Sources&lt;/strong&gt; working set and select it with the &lt;strong&gt;All Errors on Workspace&lt;/strong&gt; filter:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;5b problems view filters 521336&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/5b-problems-view-filters-521336.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There are also dedicated filters to quickly remove hits in main code or test code from Java search results:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;6 filter search result 521332&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/6-filter-search-result-521332.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Similar, there is a filter to remove test code from &lt;strong&gt;Call hierarchies&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;7 filter call hierarchy 521335&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/7-filter-call-hierarchy-521335.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Another filter to remove test code exists for &lt;strong&gt;Quick type hierarchies&lt;/strong&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;8 filter quick type hierarchy 521333&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/8-filter-quick-type-hierarchy-521333.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Test source folders will be preselected in the &lt;strong&gt;New JUnit Test Case&lt;/strong&gt; wizard&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;9 new junit 332602&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/9-new-junit-332602.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In Run and Debug configurations, the &lt;strong&gt;Classpath&lt;/strong&gt; tab (or &lt;strong&gt;Dependencies&lt;/strong&gt; tab when launching with Java 9) contains a new option &lt;strong&gt;Exclude Test Code&lt;/strong&gt;, that is automatically preselected when launching a Java Application from a source folder that is not marked to contain test sources:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;10 launching 529321&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/10-launching-529321.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When launching with Java 9 and this option is not selected, command line options will automatically be added so modules that have a non-empty classpath read the unnamed module.
      These command line options are part of what can be overridden using the new &lt;strong&gt;Override Dependencies&lt;/strong&gt; button.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;sort-library-entries-alphabetically-in-package-explorer&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#sort-library-entries-alphabetically-in-package-explorer&quot;&gt;&lt;/a&gt;Sort library entries alphabetically in Package Explorer&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The content of libraries are displayed in the order of the classpath.
      This makes it difficult to find specific libraries by their name, especially when projects have many dependencies.
      The library entries can now be sorted alphabetically when setting the preference &lt;strong&gt;Sort library entries alphabetically in Package Explorer&lt;/strong&gt; on the &lt;strong&gt;Java &amp;gt; Appearance&lt;/strong&gt; preference page:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;jdt sort library pref&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/jdt_sort_library_pref.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;jdt library entries unsorted&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/jdt_library_entries_unsorted.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The default for this preference is &lt;strong&gt;OFF&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;generate-dialogs-use-verbs-instead-of-ok&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#generate-dialogs-use-verbs-instead-of-ok&quot;&gt;&lt;/a&gt;Generate dialogs use verbs instead of OK&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;Generate…​&lt;/strong&gt; dialogs of the Java tools have been adapted to use verbs instead of OK.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-compiler&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#java-compiler&quot;&gt;&lt;/a&gt;Java Compiler&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;option-for-regex-in-module-declaration-search&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#option-for-regex-in-module-declaration-search&quot;&gt;&lt;/a&gt;Option for Regex in Module Declaration Search&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This is an &lt;strong&gt;experimental&lt;/strong&gt; support provided to allow the regular expression usage in search field while searching for module declaration.
      This can be considered as a wrapper of the API change.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;To invoke the regular expression search from the search field under &lt;strong&gt;Java Search&lt;/strong&gt;, start the expression with &quot;/r &quot; i.e, a slash &amp;amp;apos/&amp;amp;apos, the letter &amp;amp;aposr&amp;amp;apos and a blank &amp;amp;apos &amp;amp;apos (not tab) followed by a regex, an example of which is shown below:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;mod.regex.trap&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/mod.regex.trap.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the above example, all the characters trailing &quot;/r &quot; form a Java regular expression to denote a module name which starts with zero or more &amp;amp;aposn’s followed by the string &quot;.ver&quot; and followed again by zero or more number of arbitrary characters.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Another example would be to search for all modules that start with &lt;code&gt;&lt;code&gt;java.x&lt;/code&gt;&lt;/code&gt; followed by zero or more characters which is given by the regular expression &lt;code&gt;&lt;code&gt;/r java\.x.*&lt;/code&gt;&lt;/code&gt; - note the backslash for . to consider this as a &quot;normal&quot; character instead of the special regex].&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Yet another example would be search for all module names that start with j followed by zero or more characters and ending with .xml which in regex language translates to &lt;code&gt;&lt;code&gt;/r j.*\.xml&lt;/code&gt;&lt;/code&gt;.
      Please note that here the first &amp;amp;apos.&amp;amp;apos is the special regex character while the second &amp;amp;apos.&amp;amp;apos is escaped to denote that this is a normal character.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: You should use this only for &lt;strong&gt;Declarations&lt;/strong&gt; search for modules as it is not implemented for module references.
      Selecting &lt;strong&gt;All occurrences&lt;/strong&gt; in conjunction with regex will default to finding only the &lt;strong&gt;Declarations&lt;/strong&gt; matching the regex ignoring the references.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;nonnullbydefault-per-module&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#nonnullbydefault-per-module&quot;&gt;&lt;/a&gt;@NonNullByDefault per module&lt;/h4&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If a module is annotated with &lt;code&gt;&lt;code&gt;@NonNullByDefault&lt;/code&gt;&lt;/code&gt;, the compiler will interpret this as the global default for all types in this module:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;listingblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-java&quot;&gt;@org.eclipse.jdt.annotation.NonNullByDefault
      module my.nullsafe.mod { ...&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Note, however, that this requires an annotation type declared either with target &lt;code&gt;&lt;code&gt;ElementType.MODULE&lt;/code&gt;&lt;/code&gt;, or with no explicit target at all.
      Versions 2.2.0 and greater of bundle &lt;code&gt;&lt;code&gt;org.eclipse.jdt.annotation&lt;/code&gt;&lt;/code&gt; use the latter strategy and hence support a module-wide non-null default.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;nonnullbydefault-improvements&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#nonnullbydefault-improvements&quot;&gt;&lt;/a&gt;@NonNullByDefault improvements&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When using annotation-based null analysis, there are now more ways to define which unannotated locations are implicitly assumed to be annotated as &lt;code&gt;&lt;code&gt;@NonNull&lt;/code&gt;&lt;/code&gt;:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;&lt;code&gt;&lt;code&gt;@NonNullByDefault&lt;/code&gt;&lt;/code&gt; annotations based on enum &lt;code&gt;&lt;code&gt;DefaultLocation&lt;/code&gt;&lt;/code&gt; can also be used if the primary nullness annotations are declaration annotations (previously this was supported only for &lt;code&gt;&lt;code&gt;TYPE_USE&lt;/code&gt;&lt;/code&gt; annotations).&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Support for &lt;code&gt;&lt;code&gt;@NonNullByDefault&lt;/code&gt;&lt;/code&gt; annotations that are targeted at parameters has been implemented.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Multiple different &lt;code&gt;&lt;code&gt;@NonNullByDefault&lt;/code&gt;&lt;/code&gt; annotations (especially with different default values) may be placed at the same target, in which case the sets of affected locations are merged.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Annotations which use a meta annotation &lt;code&gt;&lt;code&gt;@TypeQualifierDefault&lt;/code&gt;&lt;/code&gt; instead of a &lt;code&gt;&lt;code&gt;DefaultLocation&lt;/code&gt;&lt;/code&gt;-based specification are now understood, too, e.g. &lt;code&gt;&lt;code&gt;@org.springframework.lang.NonNullApi&lt;/code&gt;&lt;/code&gt;.&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Version 2.2.0 of bundle &lt;code&gt;&lt;code&gt;org.eclipse.jdt.annotation&lt;/code&gt;&lt;/code&gt; contains an annotation type &lt;code&gt;&lt;code&gt;NonNullByDefault&lt;/code&gt;&lt;/code&gt; that can be applied to parameter and module declarations (in addition to the previously allowed targets).&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;test-sources-2&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#test-sources-2&quot;&gt;&lt;/a&gt;Test sources&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;There is now support for running Java annotation processors on test sources.
      The output folder for files generated for these can be configured in the project properties in &lt;strong&gt;Java Compiler &amp;gt; Annotation Processing&lt;/strong&gt; as &lt;strong&gt;Generated test source directory&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;testsources apt 531072&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/testsources-apt-531072.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;new-preference-added-compiler-compliance-does-not-match-used-jre&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#new-preference-added-compiler-compliance-does-not-match-used-jre&quot;&gt;&lt;/a&gt;New preference added &quot;Compiler Compliance does not match used JRE&quot;&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A new preference &lt;strong&gt;Compiler Compliance does not match used JRE&lt;/strong&gt; is added to &lt;strong&gt;Compiler Preference Building Page&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This preference indicates the severity of the problem reported when project’s used JRE does not match the compiler compliance level selected.
      (e.g. a project using JRE 1.8 as JRE System Library, and the compiler compliance is set to 1.7).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The value of this preference is by default WARNING.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;If the JRE being used is 9 or above and the &lt;strong&gt;--release&lt;/strong&gt; option is selected and even if the compiler compliance does not match the JRE being used, this option will be ignored.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;This preference can be set as shown below:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;jdt compiler compliance mismatch JRE&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/jdt_compiler_compliance_mismatch_JRE.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;java-formatter&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#java-formatter&quot;&gt;&lt;/a&gt;Java Formatter&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;new-formatter-profile-page&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#new-formatter-profile-page&quot;&gt;&lt;/a&gt;New formatter profile page&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The formatter profile preference page (&lt;strong&gt;Java &amp;gt; Code Style &amp;gt; Formatter &amp;gt; Edit…​&lt;/strong&gt;) has a new look which makes it much easier to set preferences for formatting Java code.
      Instead of multiple tabs, all preferences are presented in an expandable tree.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;formatter profile overview&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-overview.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can use &lt;strong&gt;filtering&lt;/strong&gt; to display only the settings with names matching a specific phrase. Filtering by values is also possible (prefix a value filter with a tilde).&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;formatter profile filtering&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-filtering.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Most sections have a &lt;strong&gt;Modify all&lt;/strong&gt; button in their header that lets you set all their preferences to the same value with one click.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;formatter profile modify all&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-modify-all.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Some preferences have more convenient controls. For example, number values can be easily modified with arrow buttons.
      Wrap policy settings are controlled by simple toolbars so that you can see and compare multiple policies at once.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;formatter profile wrap settings&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-wrap-settings.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;In the preview panel you can now use your own code to immediately see how it will be affected by the modified settings.
      You can also see the raw form of standard preview samples and make temporary modifications to them.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;formatter profile preview&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/formatter-profile-preview.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;formatter-align-javadoc-tags-in-columns&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#formatter-align-javadoc-tags-in-columns&quot;&gt;&lt;/a&gt;Formatter: align Javadoc tags in columns&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The formatter can now &lt;strong&gt;align names and/or descriptions&lt;/strong&gt; in Javadoc tags in new ways.
      The formatter profile editor is available for selection, under &lt;strong&gt;Comments &amp;gt; Javadoc&lt;/strong&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;formatter javadoc prefs&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/formatter-javadoc-prefs.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;For example, the &lt;strong&gt;Align descriptions, grouped by type&lt;/strong&gt; setting is now used in the built-in Eclipse profile.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;formatter javadoc preview&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/formatter-javadoc-preview.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The setting previously known as &lt;strong&gt;Indent Javadoc tags&lt;/strong&gt; is now called &lt;strong&gt;Align descriptions to tag width&lt;/strong&gt;.
      The two settings related to &lt;strong&gt;@param tags&lt;/strong&gt; also had their labels changed to better describe what they do.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;java-code-formatter-preferences-now-styled-for-the-dark-theme&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#java-code-formatter-preferences-now-styled-for-the-dark-theme&quot;&gt;&lt;/a&gt;Java code formatter preferences now styled for the dark theme&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The formatter preferences tree styling has been fixed to work properly in the dark theme.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;new-cleanup-action-remove-redundant-modifiers&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#new-cleanup-action-remove-redundant-modifiers&quot;&gt;&lt;/a&gt;New Cleanup Action &quot;Remove redundant modifiers&quot;&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The new cleanup action &quot;Remove redundant modifiers&quot; removes unnecessary modifiers on types, methods and fields.
      The following modifiers are removed:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;ulist&quot;&gt;
      &lt;ul&gt;
      &lt;li&gt;
      &lt;p&gt;Interface field declarations: &lt;code&gt;&lt;code&gt;public&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;static&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;final&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Interface method declarations: &lt;code&gt;&lt;code&gt;public&lt;/code&gt;&lt;/code&gt;, &lt;code&gt;&lt;code&gt;abstract&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Nested interfaces: &lt;code&gt;&lt;code&gt;static&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
      &lt;p&gt;Method declarations in final classes: &lt;code&gt;&lt;code&gt;final&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;/ul&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The cleanup action can be configured as save action on the &lt;strong&gt;Unnecessary Code&lt;/strong&gt; page.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;jdt remove redundant modifiers&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/jdt_remove_redundant_modifiers.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect3&quot;&gt;
      &lt;h4 id=&quot;debug&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#debug&quot;&gt;&lt;/a&gt;Debug&lt;/h4&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;launch-configuration-prototypes-for-java-launch-configurations&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#launch-configuration-prototypes-for-java-launch-configurations&quot;&gt;&lt;/a&gt;Launch configuration prototypes for Java Launch Configurations&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A Java Launch Configuration can now be based on a prototype.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;prototype java launch configuration&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/prototype-java-launch-configuration.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;A prototype seeds attributes in its associated Java Launch Configurations with the settings specified in the Prototype tab.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;prototype tab java launch configuration 1&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/prototype-tab-java-launch-configuration-1.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Once a Java Launch Configuration has been created, you can override any initial settings from the prototype.
      You can also reset the settings of a Java Launch Configuration with the ones from its prototype.
      A Java Launch Configuration maintains a link to its prototype, but is a complete stand-alone launch configuration that can be launched, exported, shared, etc.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;prototype tab java launch configuration 2&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/prototype-tab-java-launch-configuration-2.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;advanced-source-lookup-implementation&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#advanced-source-lookup-implementation&quot;&gt;&lt;/a&gt;Advanced source lookup implementation&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;More precise &lt;strong&gt;advanced&lt;/strong&gt; source lookup implementation, particularly useful when debugging applications that load classes dynamically at runtime.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;New &lt;code&gt;&lt;code&gt;org.eclipse.jdt.launching.workspaceProjectDescribers&lt;/code&gt;&lt;/code&gt; extension point can be used to enable advanced source lookup for projects with non-default layout, like PDE Plug-In projects.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;New &lt;code&gt;&lt;code&gt;org.eclipse.jdt.launching.sourceContainerResolvers&lt;/code&gt;&lt;/code&gt; can be used to download sources jar files from remote artifact repositories, like Maven Central or Eclipse P2.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Advanced source lookup affects debug launches only and can be enabled or disabled with &lt;strong&gt;Java &amp;gt; Debug &amp;gt; Use advanced source lookup (JRE 1.5 and higher)&lt;/strong&gt; preference option:&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;advanced source lookup&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/advanced-source-lookup.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;debugger-listens-to-thread-name-changes&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#debugger-listens-to-thread-name-changes&quot;&gt;&lt;/a&gt;Debugger listens to thread name changes&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;&lt;strong&gt;Debug view&lt;/strong&gt; now automatically updates thread names if they are changed in the debuggee JVM. This shows live information for worker instances, as described above.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Technically speaking, Java debugger automatically adds a new (user invisible) breakpoint in the JVM and notifies clients (like Debug view) on a breakpoint hit.
      If this behavior is undesired for some reason, product owners can disable it via product customization.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The property value is: &lt;strong&gt;org.eclipse.jdt.debug.ui/org.eclipse.jdt.debug.ui.javaDebug.ListenOnThreadNameChanges=false&lt;/strong&gt;&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;value-displayed-for-method-exit-and-exception-breakpoints&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#value-displayed-for-method-exit-and-exception-breakpoints&quot;&gt;&lt;/a&gt;Value displayed for method exit and exception breakpoints&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;When a &lt;strong&gt;method exit breakpoint&lt;/strong&gt; is hit, the value being returned is now shown in the variables view.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;returningvalue&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/returningvalue.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Similarly, when an &lt;strong&gt;exception breakpoint&lt;/strong&gt; is hit, the exception being thrown is shown.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;throwingexception&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/throwingexception.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect4&quot;&gt;
      &lt;h5 id=&quot;display-view-renamed-to-debug-shell&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#display-view-renamed-to-debug-shell&quot;&gt;&lt;/a&gt;Display view renamed to Debug Shell&lt;/h5&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;The &lt;strong&gt;Display view&lt;/strong&gt; has been renamed to &lt;strong&gt;Debug Shell&lt;/strong&gt; to better match the features and purpose of this view.
      Also, a java comment is shown in the Debug Shell on fresh open that explains when and how to use it.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;imageblock&quot;&gt;
      &lt;div class=&quot;content&quot;&gt;
      &lt;img alt=&quot;debugShell&quot; src=&quot;https://www.eclipse.org/eclipse/news/4.8/images/debugShell.png&quot; /&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect2&quot;&gt;
      &lt;h3 id=&quot;and-more&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#and-more&quot;&gt;&lt;/a&gt;And more…​&lt;/h3&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;You can find more noteworthy updates in on &lt;a href=&quot;https://tools.jboss.org/documentation/whatsnew/jbosstools/4.6.0.Final.html&quot;&gt;this page&lt;/a&gt;.&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=&quot;sect1&quot;&gt;
      &lt;h2 id=&quot;what-is-next&quot;&gt;&lt;a class=&quot;anchor&quot; href=&quot;http://tools.jboss.org/blog/news.atom#what-is-next&quot;&gt;&lt;/a&gt;What is next?&lt;/h2&gt;
      &lt;div class=&quot;sectionbody&quot;&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Having JBoss Tools 4.6.0 and Red Hat Developer Studio 12.0 out we are already working on the next release for Eclipse 2018-09.&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Enjoy!&lt;/p&gt;
      &lt;/div&gt;
      &lt;div class=&quot;paragraph&quot;&gt;
      &lt;p&gt;Jeff Maury&lt;/p&gt;
      &lt;/div&gt;
      &lt;/div&gt;
      &lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Tue, 17 Jul 2018 15:43:40 +0000</pubDate>
</item>
<item>
	<title>itemis: Xtext editors for binary files</title>
	<guid isPermaLink="true">https://blogs.itemis.com/en/xtext-editors-for-binary-files</guid>
	<link>https://blogs.itemis.com/en/xtext-editors-for-binary-files</link>
	<description>&lt;p&gt; What does &quot;4 + 1&quot; mean? Well, for example itemis employees have been developing a Java bytecode editor with Xtext. This editor allows the contents of &lt;code&gt;.class&lt;/code&gt; files to be made visible and editable.&lt;br /&gt;In the first part of this article I explained how the JBC editor is used. In this second part I want to discuss the technical problems that arise when you want to make a binary file editable with an Xtext-based editor. &lt;/p&gt; 
&lt;p&gt;The first issue to solve for a text editor for binary files is to convert the binary data into a textual format without the text editor being involved. This is done by replacing the editor with an &lt;code&gt;IDocumentProvider&lt;/code&gt;, which then performs appropriate transformations when loading and saving. As usual in Xtext this is done by dependency injection and registration within the UI module:&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package com.itemis.jbc.ui&lt;br /&gt;&lt;br /&gt;import com.itemis.jbc.ui.custom.JBCDocumentProvider&lt;br /&gt;import org.eclipse.xtext.ui.editor.model.XtextDocumentProvider&lt;br /&gt;&lt;br /&gt;@FinalFieldsConstructor&lt;br /&gt;class JBCUiModule extends AbstractJBCUiModule {&lt;br /&gt;    def Class&amp;lt;? extends XtextDocumentProvider&amp;gt; bindXtextDocumentProvider() {&lt;br /&gt;        JBCDocumentProvider&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt; 
&lt;p&gt; &lt;br /&gt;The &lt;code&gt;JBCDocumentProvider&lt;/code&gt; now overrides the two methods &lt;code&gt;setDocumentContent&lt;/code&gt; and &lt;code&gt;doSaveDocument&lt;/code&gt;. The first method converts the binary stream into text, while the second returns binary content from the model the editor obtained from the &lt;code&gt;XTextDocument&lt;/code&gt;.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package com.itemis.jbc.ui.custom&lt;br /&gt;&lt;br /&gt;import com.itemis.jbc.binary.ByteCodeWriter&lt;br /&gt;import com.itemis.jbc.jbc.ClassFile&lt;br /&gt;import java.io.ByteArrayInputStream&lt;br /&gt;import java.io.InputStream&lt;br /&gt;import org.eclipse.core.runtime.CoreException&lt;br /&gt;import org.eclipse.core.runtime.IProgressMonitor&lt;br /&gt;import org.eclipse.jface.text.IDocument&lt;br /&gt;import org.eclipse.ui.IFileEditorInput&lt;br /&gt;import org.eclipse.xtext.resource.XtextResource&lt;br /&gt;import org.eclipse.xtext.ui.editor.model.XtextDocument&lt;br /&gt;import org.eclipse.xtext.ui.editor.model.XtextDocumentProvider&lt;br /&gt;import org.eclipse.xtext.util.concurrent.IUnitOfWork&lt;br /&gt;&lt;br /&gt;class JBCDocumentProvider extends XtextDocumentProvider {&lt;br /&gt;    override protected setDocumentContent(IDocument document, InputStream contentStream,&lt;br /&gt;            String encoding) throws CoreException {
&lt;span style=&quot;font-weight: 400;&quot;&gt;        document.set(new JBCInputStreamContentReader().readContent(contentStream, encoding))&lt;br /&gt;    }&lt;/span&gt;&lt;br /&gt;    &lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;override protected doSaveDocument(IProgressMonitor monitor, Object element,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;            &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;IDocument document, boolean overwrite) throws CoreException {&lt;br /&gt;        if (element instanceof IFileEditorInput) {&lt;br /&gt;            if (document instanceof XtextDocument) {&lt;br /&gt;                if (element.file.exists &amp;amp;&amp;amp; element.file.name.endsWith(&quot;.class&quot;)) {&lt;br /&gt;                    document.readOnly(new IUnitOfWork.Void&amp;lt;XtextResource&amp;gt;() {&lt;br /&gt;                        override process(XtextResource resource) throws Exception {&lt;br /&gt;                            val ast = resource.parseResult.rootASTElement&lt;br /&gt;                            element.file.setContents(new ByteArrayInputStream(&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;    &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;ByteCodeWriter.writeClassFile(ast as ClassFile)),&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;                                    true, true, monitor))});&lt;br /&gt;                    return;&lt;br /&gt;                }&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        super.doSaveDocument(monitor, element, document, overwrite)&lt;br /&gt;    }&lt;br /&gt;}&lt;/span&gt;&lt;/pre&gt; 
&lt;p&gt; &lt;br /&gt;This is enough to fool the Xtext-based editor, as it provides it with a plain text file, but the result is not quite satisfactory. This is because the editor compares the textual content with the binary data obtained from the &lt;code&gt;.class&lt;/code&gt; file to highlight changed regions. This happens because the comparison algorithm does not get the file content directly from the editor, but instead requests &lt;code&gt;IFileEditorInput&lt;/code&gt; from the file content and &lt;code&gt;getStorage&lt;/code&gt; via the method to get the &lt;code&gt;InputStream&lt;/code&gt;.&lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;NoProxyForIFileInput&quot; height=&quot;527&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/NoProxyForIFileInput.png?t=1531400974302&amp;amp;width=660&amp;amp;height=527&amp;amp;name=NoProxyForIFileInput.png&quot; style=&quot;width: 660px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;660&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;To make the comparison meaningful, this stream also has to be transformed in the same way as was done when creating the &lt;code&gt;IDocument&lt;/code&gt;. To do this, the &lt;code&gt;doSetInput&lt;/code&gt; (&lt;code&gt;IEditorInput input&lt;/code&gt;) method is overridden by the &lt;code&gt;JBCEditor&lt;/code&gt;, so that the set input is packaged in a dynamic proxy.&lt;br /&gt;&lt;br /&gt;&lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package com.itemis.jbc.ui.custom&lt;br /&gt;&lt;br /&gt;import java.io.InputStreamReader&lt;br /&gt;import java.lang.reflect.InvocationHandler&lt;br /&gt;import java.lang.reflect.Method&lt;br /&gt;import java.lang.reflect.Proxy&lt;br /&gt;import org.eclipse.core.resources.IEncodedStorage&lt;br /&gt;import org.eclipse.core.resources.IStorage&lt;br /&gt;import org.eclipse.core.runtime.CoreException&lt;br /&gt;import org.eclipse.ui.IEditorInput&lt;br /&gt;import org.eclipse.ui.IFileEditorInput&lt;br /&gt;import org.eclipse.xtext.ui.editor.XtextEditor&lt;br /&gt;import org.eclipse.xtext.util.StringInputStream&lt;br /&gt;&lt;br /&gt;class JBCEditor extends XtextEditor {&lt;br /&gt;    override protected doSetInput(IEditorInput input) throws CoreException {&lt;br /&gt;        if (input instanceof IFileEditorInput) {&lt;br /&gt;            if (input.file.name.endsWith(&quot;.class&quot;)) {&lt;br /&gt;                super.doSetInput(input.proxy)&lt;br /&gt;                return&lt;br /&gt;            }&lt;br /&gt;        }&lt;br /&gt;        super.doSetInput(input)&lt;br /&gt;    }&lt;br /&gt;    def private IFileEditorInput proxy(IFileEditorInput editorInput) {&lt;br /&gt;        Proxy.newProxyInstance(this.class.classLoader, #[IFileEditorInput],&lt;br /&gt;                new IFileEditorInputHandler(editorInput)) as IFileEditorInput&lt;br /&gt;    }&lt;br /&gt;} &lt;/pre&gt; 
&lt;p&gt;&lt;br /&gt;The latter returns another dynamic proxy for the &lt;code&gt;getStorage&lt;/code&gt; query, which converts the file content supplied by &lt;code&gt;getContents&lt;/code&gt; into textual format.&lt;br /&gt; &lt;/p&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package class IFileEditorInputHandler implements InvocationHandler {&lt;br /&gt;    private final IFileEditorInput original&lt;br /&gt;&lt;br /&gt;    new(IFileEditorInput original) {&lt;br /&gt;        this.original = original&lt;br /&gt;    }&lt;br /&gt;    override invoke(Object proxy, Method method, Object[] args) throws Throwable {&lt;br /&gt;        if (method.name.equals(&quot;getStorage&quot;)) {&lt;br /&gt;            return (method.invoke(original, args) as IStorage).proxy&lt;br /&gt;        } else {&lt;br /&gt;            return method.invoke(original, args)&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;    def private IStorage proxy(IStorage storage) {&lt;br /&gt;        Proxy.newProxyInstance(this.class.classLoader, #[IStorage],&lt;br /&gt;                new IStorageHandler(storage)) as IStorage&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt; 
&lt;pre class=&quot;prettyprint&quot;&gt;package class IStorageHandler implements InvocationHandler {&lt;br /&gt;    private final IStorage original&lt;br /&gt;&lt;br /&gt;    new(IStorage original) {&lt;br /&gt;        this.original = original&lt;br /&gt;    }&lt;br /&gt;    override invoke(Object proxy, Method method, Object[] args) throws Throwable {&lt;br /&gt;        if (method.name.equals(&quot;getContents&quot;) &amp;amp;&amp;amp; method.parameterCount === 0) {&lt;br /&gt;            val reader = new InputStreamReader(original.contents)&lt;br /&gt;            try {&lt;br /&gt;                val content = new JBCInputStreamContentReader().readContent(original.contents&lt;br /&gt;                        (original as IEncodedStorage).charset)&lt;br /&gt;                return new StringInputStream(content)&lt;br /&gt;            } finally {&lt;br /&gt;                reader.close()&lt;br /&gt;            }&lt;br /&gt;        } else {&lt;br /&gt;            return method.invoke(original, args)&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt; 
&lt;p&gt; &lt;br /&gt;As a result the &lt;code&gt;editor.getStorage().GetContents()&lt;/code&gt; call returns the same content as was supplied by the &lt;code&gt;document.get()&lt;/code&gt;, and the comparison of the document content with that from the file now yields the expected results.&lt;br /&gt; &lt;/p&gt; 
&lt;p&gt;&lt;img alt=&quot;WithProxyForIFileInput&quot; height=&quot;377&quot; src=&quot;https://blogs.itemis.com/hs-fs/hubfs/WithProxyForIFileInput.png?t=1531400974302&amp;amp;width=660&amp;amp;height=377&amp;amp;name=WithProxyForIFileInput.png&quot; style=&quot;width: 660px; display: block; margin-left: auto; margin-right: auto;&quot; width=&quot;660&quot; /&gt;&lt;/p&gt; 
&lt;p&gt;The editor implemented here is quite simple, in that each &lt;code&gt;.class&lt;/code&gt; file is considered individually: there is no global scope to allow references between multiple files to be resolved and validated. This means that it isn’t easy to develop an entire project directly in class-file-format.&lt;/p&gt; 
&lt;p&gt;However, this is not a fundamental problem, merely a design decision. The editor is explicitly intended for editing individual &lt;code&gt;.class&lt;/code&gt; files. There is nothing wrong, however, with the idea of extending the techniques to other binaries in order to create useful editors for them without an explicit intermediate textual format. These could be stored in files, and these files be linked by references within a global scope.&lt;/p&gt;  
&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;https://track.hubspot.com/__ptq.gif?a=761475&amp;amp;k=14&amp;amp;r=https%3A%2F%2Fblogs.itemis.com%2Fen%2Fxtext-editors-for-binary-files&amp;amp;bu=https%253A%252F%252Fblogs.itemis.com&amp;amp;bvt=rss&quot; style=&quot;width: 1px!important;&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 13 Jul 2018 12:10:00 +0000</pubDate>
	<author>adeutsch@itemis.de (Arne Deutsch)</author>
</item>
<item>
	<title>vert.x project: Eclipse Vert.x 3.5.3</title>
	<guid isPermaLink="true">https://vertx.io/blog/eclipse-vert-x-3-5-3</guid>
	<link>https://vertx.io/blog/eclipse-vert-x-3-5-3</link>
	<description>&lt;article&gt;&lt;p&gt;We have just released Vert.x 3.5.3, a bug fix release of Vert.x 3.5.x.&lt;/p&gt;
&lt;p&gt;Since the release of Vert.x 3.5.2, quite a few bugs have been reported. We would like to thank you all for reporting these issues.&lt;/p&gt;
&lt;p&gt;Vert.x 3.5.3 release notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/wiki/wiki/3.5.3-Release-Notes&quot;&gt;https://github.com/vert-x3/wiki/wiki/3.5.3-Release-Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The event bus client using the SockJS bridge are available from NPM, Bower and as a WebJar:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vertx3-eventbus-client&quot;&gt;https://www.npmjs.com/package/vertx3-eventbus-client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/vert-x3/vertx-bus-bower&quot;&gt;https://github.com/vert-x3/vertx-bus-bower&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.webjars.org/&quot;&gt;http://www.webjars.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker images are also available on the &lt;a href=&quot;https://hub.docker.com/u/vertx/&quot;&gt;Docker Hub&lt;/a&gt;. The Vert.x distribution is also available from &lt;a href=&quot;http://sdkman.io/index.html&quot;&gt;SDKMan&lt;/a&gt; and &lt;a href=&quot;http://brew.sh/&quot;&gt;HomeBrew&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The artifacts have been deployed to &lt;a href=&quot;http://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.vertx%22%20AND%20v%3A%223.5.2%22&quot;&gt;Maven Central&lt;/a&gt; and you can get the distribution on &lt;a href=&quot;https://bintray.com/vertx/downloads/distribution/3.5.2/view&quot;&gt;Bintray&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Happy coding and see you soon on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 13 Jul 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Call for submissions for EclipseCon Europe 2018</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/ebujap_ybxA/europe2018</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/ebujap_ybxA/europe2018</link>
	<description>Be part of the EclipseCon Europe program. Submit your talks by July 16th.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/ebujap_ybxA&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 06 Jul 2018 15:00:00 +0000</pubDate>
</item>
<item>
	<title>Niko Stotz: First Eclipse DemoCamp in Eindhoven: A Great Start and Even Greater Community</title>
	<guid isPermaLink="false">https://www.nikostotz.de/blog/?p=383</guid>
	<link>https://www.nikostotz.de/blog/first-eclipse-democamp-in-eindhoven-a-great-start-and-even-greater-community/</link>
	<description>&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-387&quot; height=&quot;360&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/audience-1024x576.jpg&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Yesterday, we held the first Eclipse DemoCamp ever in Eindhoven, at the Altran office. About 40 people from a dozen different companies joined in and enjoyed the nice dinner buffet.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignright size-medium wp-image-392&quot; height=&quot;300&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/marcV-200x300.jpg&quot; width=&quot;200&quot; /&gt;Marc Vloemans of Eclipse Foundation kicked off the DemoCamp with a short introduction: DemoCamps are about showing the great work members of the Eclipse community contribute – committers and users alike. Marc emphasized the possibilities of sharing the work between different groups and projects, vastly simplified by the Open Source concept.&lt;/p&gt;
&lt;p&gt;Next up was Karsten Thoms of itemis. He swept the audience with an awesome intro – go see it if you have the chance, for example at the &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Bonn&quot;&gt;DemoCamp Bonn&lt;/a&gt; next week or (most probably) &lt;a href=&quot;https://www.eclipsecon.org/europe2018&quot;&gt;EclipseCon Europe&lt;/a&gt; in October! Without spoiling the fun, let’s say it gave A New Hope …&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignleft size-medium wp-image-390&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/karsten-300x200.jpg&quot; width=&quot;300&quot; /&gt;Karsten reported on the many changes he and more than 100 other community members contributed to the Eclipse Platform for the Photon Release Train. He showed lots of examples of the general speed improvements of Eclipse Photon. Also, the Run Configuration’s “Add all required Plug-ins” button finally fulfills its promise!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignleft size-medium wp-image-391&quot; height=&quot;169&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/MarcH-300x169.jpg&quot; style=&quot;clear: left;&quot; width=&quot;300&quot; /&gt;Marc Hamilton explained Altran’s approach for real-world complex modeling environments based on half a dozen Eclipse technologies. At the end, there is always some software produced. Using a modeling approach, most of the actual software production is pushed to generators, while the engineers focus on describing the issue at hand in domain-specific languages.&lt;/p&gt;
&lt;p&gt;Marc showed how EMF, OCL, QVTo, Acceleo, EGF, Xtext, and Sirius are used, and listed the advantages, drawbacks and a wishlist for each technology.&lt;/p&gt;
&lt;p style=&quot;clear: both;&quot;&gt;During the break, we had the opportunity to pick up stickers provided by Karsten and discuss with other members of the community.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;size-medium wp-image-394&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/stickers-300x200.jpg&quot; width=&quot;300&quot; /&gt; &lt;img alt=&quot;&quot; class=&quot;size-medium wp-image-388&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/break-300x200.jpg&quot; width=&quot;300&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;clear: both;&quot;&gt;After the break, we enjoyed the talk of Mélanie Bats, arriving directly from Obeo in Toulouse. She showed new features of Sirius 6, most prominently the ELK layout integration and the magic connector tool to auto-select applicable connections.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignright size-medium wp-image-393&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/melanie-300x200.jpg&quot; width=&quot;300&quot; /&gt;Furthermore, she gave an outlook on the future of Sirius both within Eclipse and in the Web. She envisioned a Graphical Server Protocol akin to the Language Server Protocol to federate diagramming providers from the clients.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignright size-medium wp-image-389&quot; height=&quot;200&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/holger-300x200.jpg&quot; style=&quot;clear: right;&quot; width=&quot;300&quot; /&gt;Last but not least, Holger Schill of itemis presented the new features of Xtext 2.14. He reported on the huge effort required to get Xtext fully compatible with Java 9, 10, and Junit 5 in all supported environments – and there are plenty! Other notable enhancements include code mining support (showing additional information within the editor without changing the file) and support for new Project / File wizards. The latter ones do not only create plain wizards, but provide a rich API to create customized wizards without the usual hassle of creating SWT dialogs.&lt;/p&gt;
&lt;p&gt;We presented a small gift to all the speakers, who spread the word in the community on their own expenses — Huge thanks to Marc, Karsten, Marc, Mélanie, and Holger!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-386&quot; height=&quot;360&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/allSpeakers-1024x576.jpg&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;Lots of community members stayed to discuss the presentations and talk to the creators of the technology we use every day.&lt;/p&gt;
&lt;p&gt;We enjoyed the DemoCamp a lot. We’re looking forward to have even more talks, topics, and attendees next time!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-384&quot; height=&quot;360&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/after1-1024x576.jpg&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;aligncenter size-large wp-image-385&quot; height=&quot;360&quot; src=&quot;https://www.nikostotz.de/blog/wp-content/uploads/2018/07/after2-1024x576.jpg&quot; width=&quot;640&quot; /&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 05 Jul 2018 15:25:18 +0000</pubDate>
        <enclosure url="https://www.nikostotz.de/blog/wp-content/uploads/2018/07/audience-1024x576.jpg" length="2854" type="image/jpeg"/>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Foundation Annual Community Report</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/UD8cG7DXw24/2018_annual_report.php</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/UD8cG7DXw24/2018_annual_report.php</link>
	<description>The Eclipse Foundation's 2018 Annual Community Report has been published, and is now available.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/UD8cG7DXw24&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 03 Jul 2018 20:00:00 +0000</pubDate>
</item>
<item>
	<title>Scott Lewis: Rest Remote Services with Karaf and CXF/Jersey</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-20358640.post-8613088716780413920</guid>
	<link>http://eclipseecf.blogspot.com/2018/07/rest-remote-services-with-karaf-and.html</link>
	<description>ECF's &lt;a href=&quot;https://www.eclipse.org/ecf/NewAndNoteworthy.html&quot;&gt;Photon Release&lt;/a&gt; now includes an example of using &lt;a href=&quot;https://wiki.eclipse.org/Tutorial:_JaxRS_Remote_Services_on_Karaf&quot;&gt;Karaf with the JaxRS distribution provider&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;This distribution provider now fully supports OSGi R7 remote services, including &lt;a href=&quot;http://eclipseecf.blogspot.com/2018/06/ecf-photon-supports-osgi-r7-async.html&quot;&gt;async remote services&lt;/a&gt;, using either the &lt;a href=&quot;https://wiki.eclipse.org/Tutorial:_JaxRS_Remote_Services_on_Karaf#Using_Jersey_JaxRS_Rather_than_CXF&quot;&gt;Jersey&lt;/a&gt; or &lt;a href=&quot;https://wiki.eclipse.org/Tutorial:_JaxRS_Remote_Services_on_Karaf#Install_CXF_Distribution_Provider_Karaf_Console&quot;&gt;CXF&lt;/a&gt; JaxRS implementations.&lt;br /&gt;&lt;br /&gt;This allows service developers to easily use only &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_API_for_RESTful_Web_Services&quot;&gt;JAX-RS&lt;/a&gt; annotations to define and implement OSGi R7 remote services.</description>
	<pubDate>Tue, 03 Jul 2018 18:55:35 +0000</pubDate>
	<author>noreply@blogger.com (Scott Lewis)</author>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter | Eclipse Photon</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/3lCG_6IKNPE/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/3lCG_6IKNPE/</link>
	<description>Naturally, this issue of the newsletter features some of the things that are new in Eclipse Photon!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/3lCG_6IKNPE&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 03 Jul 2018 17:00:00 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: Using CMake for the ESP32 with the Eclipse C/C++ IDE</title>
	<guid isPermaLink="false">https://cdtdoug.ca/2018/07/02/cdt-for-esp32</guid>
	<link>https://cdtdoug.ca/2018/07/02/cdt-for-esp32.html</link>
	<description>&lt;p&gt;The Photon release of the Eclipse C/C++ IDE now includes support for a number of different build systems. CMake is one of the most popular build systems with open source projects so it was an obvious candidate. The Eclipse CDT project has been working on CMake support for a few years and now it’s ready for wider adoption.&lt;/p&gt;

&lt;p&gt;One of the open source projects using CMake is the Espressif IoT Development Framework, ESP-IDF, an SDK for their inexpensive and highly featured system on a chip, the ESP32. It is widely popular with hobbyists with boards available from a number of vendors. Though CMake support is currently in a feature branch, it is expected their CMake build files will make it to the master branch in the upcoming months.&lt;/p&gt;

&lt;p&gt;This environment is a great example of how the new features in the Eclipse C/C++ IDE automate much of the build and launch process to speed up development on microcontroller projects. We will walk though each of the steps to build an application and get it running on a board and will highlight the new features in Eclipse Photon as we go.&lt;/p&gt;

&lt;h2 id=&quot;environment&quot;&gt;Environment&lt;/h2&gt;

&lt;p&gt;Espressif provides &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/feature-cmake/get-started/index.html&quot;&gt;thorough documentation on how to set up your development environment&lt;/a&gt;. Here’s a quick highlights of what I did for mine. I’m using Windows 10 with CMake, Ninja, and Python 2.7 provided by &lt;a href=&quot;https://scoop.sh/&quot;&gt;scoop&lt;/a&gt;. No MSYS or Cygwin. I use busybox for my shell but Eclipse doesn’t need it.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow the &lt;a href=&quot;https://docs.espressif.com/projects/esp-idf/en/feature-cmake/get-started/windows-setup-scratch.html&quot;&gt;Setup Windows Toolchain from Scratch&lt;/a&gt; instructions to get the xtensa toolchain and mconf Kconfig utility. Add them to your PATH environment variable.&lt;/li&gt;
  &lt;li&gt;Checkout the features/cmake branch of the ESP-IDF. Make sure you do a recursive checkout to pick up it’s numerous git submodules. Set the IDF_PATH environment variable to the root location of the repo.&lt;/li&gt;
  &lt;li&gt;Install the pyserial Python library for esptool.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now we’re ready to fire up Eclipse.&lt;/p&gt;

&lt;h2 id=&quot;cmake-project&quot;&gt;CMake Project&lt;/h2&gt;

&lt;p&gt;In the New C/C++ Project wizard select “Empty or Existing CMake Project” from the list of templates and create a new project. This will create the project but without a CMakeLists.txt or any source files.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/NewCMakeProject.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-toolchain&quot;&gt;The Toolchain&lt;/h2&gt;

&lt;p&gt;We now need to tell CDT which toolchain to use when building the project. This will pass the required arguments to CMake when generating the Ninja files.&lt;/p&gt;

&lt;p&gt;In the Preferences, select C/C++ and then CMake to see the list of toolchain files CDT will use with CMake. Click Add. Each CMake toolchain file is associated with a toolchain. Since we have the xtensa toolchain in our PATH, CDT will auto discover it and it will appear in the dropdown. Also enter the location of the esp-idf toolchain file which is in the esp-idf repo under tools/cmake/toolchain-esp32.cmake.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/CMakeToolchain.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-launch-target&quot;&gt;The Launch Target&lt;/h2&gt;

&lt;p&gt;Next we need to tell CDT to use the toolchain for our project. This is accomplished through the Launch Bar, the new widget set you see on the far left of the toolbar.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/LaunchBar.png&quot; style=&quot;height: 100px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the third dropdown and select New Launch Target. We need to tell CDT about the target where we’d like to launch our application. We’ll be using the flash loader so select Serial Flash Target. Enter a name for the target, “esp32” as the operating system, “xtensa” as the CPU architecture, and select the serial port your ESP32 device is connected to on your machine.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/SerialTarget.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The OS and architecture need to match the settings for the toolchain. You can see those settings in the Preferences by selecting C/C++ and Core Build Toolchains. For GCC toolchains, CDT autodetects those settings by asking GCC for it’s target triple.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/Toolchains.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;build&quot;&gt;Build&lt;/h2&gt;

&lt;p&gt;For this first project, we’ll use the Hello World example from the ESP-IDF. It is found in the examples/get-started/hello_world. Copy the contents of this directory into your project. Since we’re using CMake you can delete the Makefile and the main/component.mk files to prove you’re using CMake.&lt;/p&gt;

&lt;p&gt;Notice that the Launch Bar shows Run Hello World on ESP32. When you click the Build button, it will run a build of that project for the ESP32 Launch Target in Run mode, the only one available for the ESP32 for now, and will make sure the right toolchain and CMake toolchain file are used in the build.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/Build.png&quot; style=&quot;height: 200px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;terminal&quot;&gt;Terminal&lt;/h2&gt;

&lt;p&gt;To see what our program does, we need to see the output from the serial port. I have an Adafruit Huzzah32 which uses USB to both power the board while in development and to talk over the serial port. We’ll use the Eclipse Terminal to connect to that serial port. Click the Terminal toolbar button and select Serial Terminal as the terminal type and complete the rest of the settings.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/Terminal.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;launch&quot;&gt;Launch&lt;/h2&gt;

&lt;p&gt;To get the app running on the board, we need to download it over the USB serial port and burn it into the flash memory on the device. The ESP-IDF has a tool for that called esptool. The IDF also has a nice wrapper script that manages flashing as well as a number of other handy operations.&lt;/p&gt;

&lt;p&gt;To hook it up, we need to set up the launch configuration. This is where the Launch Bar shines. Click on the gear next to your project in the middle selector. It will open a launch configuration edit dialog. Since our target type is Serial Launch Target, it has a simple launch that executes an external tool. We’ll set it up to run python with the idf.py script and set the build directory and serial port and ask it to flash.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdtdoug.ca/images/esp32article/LaunchConfig.png&quot; style=&quot;height: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you had a program running on your chip you’ll notice in the Terminal that it stopped printing there. The CDT has noticed that your launch target and the terminal are using the same serial port and pauses the terminal while the python script runs. This is especially important on Windows since only one program may control the serial port at a time. Once it starts up again, you see the output of your program. This makes it very easy to iterate changes.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The Eclipse Photon release of the C/C++ IDE is the culmination of a number of years of work on the Launch Bar and CDT’s new Core Build system that gives us CMake and makes it easy to integrate other build and launch tools. Bringing these tools together and having them work together to accellerate development is what Integrated Development Environments are all about.&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 18:00:00 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EclipseSource Oomph Profile – updated to Photon</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=39731</guid>
	<link>https://eclipsesource.com/blogs/2018/07/02/eclipsesource-oomph-profile-updated-to-photon/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Last week, Eclipse Photon has been released, a new version of the Eclipse IDE and platform. It contains many useful improvements, so it is worth to update.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;One of many noteworthy extensions is the new support for code mining. In case you wonder what that is (you do not even find a definition on wikipedia), let us quickly introduce this new feature. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The general idea is to add additional information to a source code editor, which is not code or a comment. That means, this information is not stored in the underlying file, but it augments the text editor during runtime. In fact, you cannot only add information, but also actions, essentially buttons, that can trigger context related behavior.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let us look at an example: In the following screenshot, you see a test case, which is augmented via code mining. For every test, it shows the state of the last test run, as well as two “buttons” (run and debug) to trigger another execution of the test. The same is available for the test class (e.g. “run all”). The screenshot also shows another example for code mining. The parameter passed into the Junit method fail() is augmented by the type and the name, as defined in the signature of fail().&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;EclipseSource Oomph Profile - updated to Photon&quot; class=&quot;alignnone wp-image-39732 size-full&quot; height=&quot;322&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2018/07/image1.png&quot; width=&quot;395&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that Eclipse itself does not provide any use cases of code mining, but it provides the ability to plugin code mining applications. The examples shown above are from the JDT Code Mining plugin, which &lt;/span&gt;&lt;a href=&quot;https://github.com/angelozerr/jdt-codemining&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;can be found on Github&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. It allows to turn specific code mining applications on or off, depending on how useful you consider them.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Code Mining is a very interesting new feature an we look forward to new ideas and use cases that developers might add. Given the well-proven extension mechanism of Eclipse, it is relatively low effort to implement custom code mining extensions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Further general improvements of the Eclipse Photon release are summarized in the following video, Java and Maven improvements in a separate video below.  Both are provided by Holger Voormann, whom we want to thank you for this great work!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As always, in case you use our EclipseSource Oomph profile (see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2015/08/17/introducing-the-eclipsesource-oomph-profile/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;here&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details), you should get a notification and Oomph will apply the update automatically. If you do not get the notification, just navigate to the menu entry “Help” =&amp;gt; “Perform Set-Up Task”. &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will automatically update all plugins to Photon, but keep all existing settings untouched.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Have fun with Eclipse Photon!&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 14:45:03 +0000</pubDate>
</item>
<item>
	<title>Karsten Thoms: Touring the Eclipse Photon DemoCamps – Next stop: Eindhoven, NL, July 4th!</title>
	<guid isPermaLink="false">http://kthoms.wordpress.com/?p=1015</guid>
	<link>https://kthoms.wordpress.com/2018/07/02/touring-the-eclipse-photon-democamps-next-stop-eindhoven-nl-july-4th/</link>
	<description>&lt;p&gt;Eclipse DemoCamps are a wonderful format to learn the hottest new stuff from all the bandwidth of Eclipse projects: Core IDE, IoT, Smart Home, Modeling, JakartaEE, MicroProfile, Tools and so on. It is also a great way to get in touch with creators, committers, influencers and users of these technologies.&lt;/p&gt;
&lt;p&gt;For this DemoCamp season I am promoting the &lt;a href=&quot;https://projects.eclipse.org/projects/eclipse.platform/who&quot;&gt;Eclipse Platform Project&lt;/a&gt; and thus the &lt;a href=&quot;https://www.eclipse.org/photon/&quot;&gt;Eclipse Photon IDE&lt;/a&gt;. Eclipse Photon comes with a plethora of new features and improvements which are hard to compress into a DemoCamp format. Usually presentations in DemoCamps are just 20 minutes. Attendees should get an overview of multiple projects and interesting stuff with a wide range of topics. And since DemoCamps are in the evenings, attendees want to get entertained and not bored by long talks. The focus is on real demos, live coding and networking. I love to do that.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;screenshot 178.png&quot; class=&quot;alignnone size-full wp-image-1016&quot; src=&quot;https://kthoms.files.wordpress.com/2018/07/screenshot-178.png?w=584&quot; /&gt;&lt;/p&gt;
&lt;p&gt;My talk is named “&lt;strong&gt;&lt;em&gt;Approaching Light Speed – News from the Eclipse Photon Platform&lt;/em&gt;&lt;/strong&gt;“. &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/approaching-light-speed-news-eclipse-photon-platform&quot;&gt;I have given this talk already at EclipseCon France&lt;/a&gt;, at the &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Zurich&quot;&gt;DemoCamps in Zurich&lt;/a&gt; and &lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Darmstadt&quot;&gt;Darmstadt&lt;/a&gt;, and internally at our itemis headquater before our yearly company wide party called &lt;em&gt;&lt;a href=&quot;https://blogs.itemis.com/de/arbeiten-bei-itemis-feiern-geh%C3%B6rt-dazu&quot;&gt;itemis SummerCon&lt;/a&gt;&lt;/em&gt;. I have prepared quite a bunch of stuff to talk about. But different then usually, I do not perform live coding, but show coding with small screencasts in my presentation. For this talk I would have to switch too many between different code and workspaces, and comparisons to the previous version Eclipse Oxygen would make this even worse. It is just too confusing if I would switch so often. And would take much longer so I could present not that much.&lt;/p&gt;
&lt;p&gt;At EclipseCon France I had 35 minutes for the talk, and even for that I had strip down the material I already had. The new supported Java versions 9 and 10 in JDT I could just scratch at surface level, although this is one of the real major things in Eclipse Photon. But platform improvements are that much that JDT has to be put into background. For a DemoCamp talk in 20 minutes challenges become bigger. However, in Zurich and Darmstadt I had only those 20 minutes and I thing I managed to give a smooth and interesting presentation. The attendees I spoke afterwards were impressed from all the great stuff that comes with the Eclipse Photon IDE and made them hungry to finally get Photon and use it for their work. Last week on June 27th it was finally time for the great release!&lt;/p&gt;
&lt;p&gt;My next stop is now the &lt;strong&gt;&lt;a href=&quot;https://wiki.eclipse.org/Eclipse_DemoCamps_2018/Eindhoven&quot;&gt;DemoCamp in Eindhoven this Wednesday on July 4th 2018&lt;/a&gt;.&lt;/strong&gt; This DemoCamp will be held at the office from &lt;a href=&quot;https://www.altran.com/nl/en/&quot;&gt;Altran&lt;/a&gt; and is organized by my former colleague Niko Stotz. This will be the first Eclipse DemoCamp held in Eindhoven, and maybe the first in the Netherlands (I don’t remember if one was already in the Netherlands so far). I am interested how engaged the developer community in and around Eindhoven is and hope for Niko that many interested people are making their way to the event!&lt;/p&gt;
&lt;p&gt;My colleague and friend Holger Schill will present the new and noteworthy features of the new &lt;a href=&quot;https://www.eclipse.org/Xtext/releasenotes.html#/releasenotes/2018/05/23/version-2-14-0&quot;&gt;Xtext 2.14 release&lt;/a&gt; that ships with Eclipse Photon. Last week we showed this in the webinar &lt;em&gt;“&lt;a href=&quot;https://www.meetup.com/de-DE/Virtual-Eclipse-Community-MeetUp/events/251050425/&quot;&gt;Eclipse Photon Series: What’s New in the Eclipse Xtext 2.14?&lt;/a&gt;“&lt;/em&gt;, which got &lt;a href=&quot;https://www.youtube.com/watch?v=Isxverh09e4&quot;&gt;recored on YouTube&lt;/a&gt;. If you want the information given there in 60 minutes condensed, make sure to visit the DemoCamp! Further you will see the wonderful Mélanie Bats. She will present all the new features in &lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Eclipse Sirius 6&lt;/a&gt;. Besides all the news from the modeling technologies Marc Hamilton is showing how they use the Eclipse Modeling technology stack (Xtext, Sirius, EMF and others) at Altran to build solutions with them.&lt;/p&gt;
&lt;p&gt;So, my fellow software engineers &amp;amp; craftsmen in the Netherlands, &lt;a href=&quot;https://eclipse.altran.nl/&quot;&gt;register for the Eindhoven DemoCamp&lt;/a&gt; now and see you there!&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 14:42:31 +0000</pubDate>
</item>
<item>
	<title>Melanie Bats: Sirius 6</title>
	<guid isPermaLink="true">http://melb.enix.org/2018/07/02/futur-of-modeling-tools/</guid>
	<link>http://melb.enix.org/2018/07/02/futur-of-modeling-tools/</link>
	<description>&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/sirius/&quot;&gt;Eclipse Sirius&lt;/a&gt; is a framework to easily and quickly create a graphical modeling workbench dedicated to your domain specific language.&lt;/p&gt;

&lt;p&gt;This year at &lt;a href=&quot;https://www.obeo.fr/en&quot;&gt;Obeo&lt;/a&gt;, we started working on two aspects: &lt;strong&gt;prepare the future of Sirius&lt;/strong&gt; &amp;amp; provide &lt;strong&gt;new features for the upcoming 6.0&lt;/strong&gt; release which is part of the Photon release train.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Ready for Photon? Sirius 6.0 is there for you!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have added several new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Support for background color on diagrams&lt;/strong&gt;: it is now possible to dynamically compute the color of the diagram according to the state of the model. This is a small feature, but it continues to expand the visual customization capabilities available to specifiers.
&lt;img alt=&quot;Background color on diagrams&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/diagram_background.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;New “magic” edge creation tool&lt;/strong&gt;: All diagrams will now benefit for free from a new smart edge creation tool. Thanks to this end users no longer have to chase for the appropriate tool in the palette (which can contain many entries): just click on the source and target of the edge to create and Sirius will automatically detect which tools can be applied to them. If there is only one, the edge is created immediately. If several tools are possible as is the case of the animation, a menu opens to choose among the candidate tools.
&lt;img alt=&quot;New “magic” edge creation tool&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/runtime_sirius_demo2.gif&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Quick navigation to service method implementation&lt;/strong&gt;: Real-world modelers often need to call into Java code to perform complex operations on models or call into Sirius and Eclipse APIs. This is very straightforward to do in Sirius with the notion of Java services that can be transparently invoked from AQL expressions. It is now possible to navigate from the expressions in the Sirius specification which invoke a service method directly into the corresponding Java code with a single keystroke.
&lt;img alt=&quot;Quick navigation to service method implementation&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/runtime_sirius_demo.gif&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Integration with ELK for improved diagram layouts&lt;/strong&gt;: Sirius has always proposed an automatic layout algorithm. Specifiers can now leverage the high-quality layout algorithms provided by the Eclipse ELK project. You can choose any of the algorithms proposed by ELK and tweak all their configuration parameters in the Sirius specification. The end users will transparently get a nicer layout when using the existing “Arrange All” action. This is experimental in Sirius 6.0. Give us feedback on which aspects to focus on for the future.
&lt;img alt=&quot;Integration with ELK for improved diagram layouts&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/runtime_sirius_sm.png&quot; /&gt;
&lt;img alt=&quot;Override ELK options&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/override_options.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;What’s next&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;We are working on what would be the future of modeling tools. We already gathered 
some feedback from the community. You expect that modeling in the future would be: &lt;strong&gt;fast, simple, easy, beautiful, cloud &amp;amp; collaborative&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We believe that the concept of IDE is evolving. In the future, we will have more accessible tools and better tool integration. In the end, we think that tools should become IDE agnostic.  We will have more and more tools dedicated to specific domains. These tools would be available more broadly, for various kind of users on any kind of platforms. We need frameworks to ease the creation of such specific tools dedicated to one usage. That’s why we believe in frameworks such as Sirius.&lt;/p&gt;

&lt;p&gt;Sirius is a really nice framework to create dedicated desktop workbenches based today on the Eclipse platform. Our purpose is to bring the spirit of Sirius to the cloud: easily develop modeling workbenches but rendered in a browser and integrable in any web application.&lt;/p&gt;

&lt;p&gt;So where are we today? We are going step by step and work on different aspects.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;Introduce web technologies in existing Eclipse views&lt;/strong&gt;: Our first step is to introduce web technologies in existing Eclipse views. This approach is used to provide a brand new feature in Sirius 6.0 called Workflow which allows specifiers to guide users through the usage of their workbench. On the left of the following screenshot, we see a Sirius configuration file which defines a workflow with different actions using this new DSL. To the end-user, these are rendered as web elements inside the Eclipse view. Note that this new feature is still experimental in 6.0, and will be improved for version 6.1 this fall.
&lt;img alt=&quot;Web components in Eclipse view&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/webcomponents_sm.png&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Make Sirius independent from Eclipse platform&lt;/strong&gt;: The idea is to make the Sirius code base more modular, isolating the core business concerns from the current Eclipse-based technology stack: the Eclipse UI, GMF, the workspace, and even the Eclipse Runtime itself. We will work on this progressively over several versions, making sure Sirius always keeps working even in the classical Eclipse-based context. The end goal is to get a set of core components that can be reused both in Eclipse and, more to the point, inside a web server exposing its services to any web client through a well-defined protocol.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;&lt;a href=&quot;https://www.youtube.com/Ua3-93O3TRs&quot;&gt;Render Sirius diagrams in a browser&lt;/a&gt;&lt;/strong&gt;: Based on a classical Sirius configuration, we can render in a browser the graphical elements of a diagram. As usual, the specifier can work on the look and feel of his modeler iteratively. This prototype is based on Sprotty. Sprotty is a new project proposed to the Eclipse Foundation by TypeFox. It is a small, lightweight, open source &amp;amp; well architectured JavaScript graphical library providing rendering in SVG &amp;amp; well integrated with Eclipse ELK which provides auto-layout.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Sirius integrated with Cloud IDEs&lt;/strong&gt;: Sirius in a near future will be IDE-agnostic. Then you will be able to integrate Sirius based workbenches in any web application or any IDE. Have a look at the prototypes we already have of Sirius integrated in Eclipse Theia and of Sirius integrated in Eclipse Che.
&lt;img alt=&quot;Sirius integrated with Cloud IDEs&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/sirius_components_sm.png&quot; /&gt;
To sum up, we will keep working on the existing Sirius project and we will reintegrate the new web-related features and components. This summer we will continue our work on the modularization of the architecture. And for the 6.1 this fall, we will contribute a first version of web based diagrams based on the Graphical Server Protocol. 
&lt;img alt=&quot;Sirius timeline&quot; src=&quot;http://melb.enix.org/img/futur-of-modeling-tools/diagram_workflow.png&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;At Obeo, we’re taking a community-first approach to influence the development of the next generation of modeling tools. Please tell us what you want! We have lots of ideas for the future of Sirius. But what we need is to know what YOU need. So please Speak Up!&lt;/p&gt;</description>
	<pubDate>Mon, 02 Jul 2018 10:00:00 +0000</pubDate>
</item>
<item>
	<title>vert.x project: Simplified database transaction management with the Vert.x RxJava API</title>
	<guid isPermaLink="true">https://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api</guid>
	<link>https://vertx.io/blog/simplified-database-transaction-management-with-the-vert-x-rxjava-api</link>
	<description>&lt;article&gt;&lt;p&gt;&lt;em&gt;TL;DR As of 3.5, managing database transactions with Vert.x requires a lot of boilerplate code.&lt;/em&gt;
&lt;em&gt;Vert.x 3.6 will provide helpers and &lt;code&gt;Observable&lt;/code&gt; transformers to easily make a reactive flow transactional.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;simple-queries-with-the-_-rxified-_-api&quot;&gt;Simple queries with the &lt;em&gt;“Rxified”&lt;/em&gt; API&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://vertx.io/docs/vertx-rx/java2/&quot;&gt;Vert.x API for RxJava&lt;/a&gt; is one of the most popular modules in the Vert.x stack.&lt;/p&gt;
&lt;p&gt;So we make sure the &lt;em&gt;“Rxified”&lt;/em&gt; API is easy to use for common programming tasks, such as reading rows from a relational database and sending the result to the client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;dbClient.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name, duration FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;)
  .map(ResultSet::getResults)
  .map(rows -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
  })
  .subscribe(json -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
  }, t -&amp;gt; {
    &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
  });&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;managing-transactions-with-vert-x-3-5&quot;&gt;Managing transactions with Vert.x 3.5&lt;/h2&gt;
&lt;p&gt;But very often, developers have to implement complex interactions with the database, running inside a single transaction.
To do so, the implementation must follow this process:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;get a connection from the pool,&lt;/li&gt;
&lt;li&gt;start a transaction,&lt;/li&gt;
&lt;li&gt;execute queries,&lt;/li&gt;
&lt;li&gt;if all queries succeed, commit the transaction,&lt;/li&gt;
&lt;li&gt;otherwise, rollback the changes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How does that translate to code?&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;&lt;span class=&quot;hljs-comment&quot;&gt;// Get a connection from the pool&lt;/span&gt;
dbClient.rxGetConnection().flatMap(sqlConnection -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Setting auto-commit mode to false implicitely starts a transaction&lt;/span&gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;)
    .andThen(
      &lt;span class=&quot;hljs-comment&quot;&gt;// Database queries&lt;/span&gt;
      sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES ('The Israelites')&quot;&lt;/span&gt;)
        .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')&quot;&lt;/span&gt;))
        .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')&quot;&lt;/span&gt;))
        .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;).map(ResultSet::getResults))
    )
    &lt;span class=&quot;hljs-comment&quot;&gt;// Commit if all queries succeed&lt;/span&gt;
    .flatMap(rows -&amp;gt; sqlConnection.rxCommit().andThen(Single.just(rows)))
    .onErrorResumeNext(throwable -&amp;gt; {
      &lt;span class=&quot;hljs-comment&quot;&gt;// On error, rollback the changes&lt;/span&gt;
      &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxRollback().onErrorComplete()
        .andThen(sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;).onErrorComplete())
        .andThen(Single.error(throwable));
    }).flatMap(rows -&amp;gt; sqlConnection.rxSetAutoCommit(&lt;span class=&quot;hljs-keyword&quot;&gt;true&lt;/span&gt;).andThen(Single.just(rows)))
    .doFinally(sqlConnection::close);
}).map(rows -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is a lot of boilerplate around the specific database queries…
It would be better to relieve the developer from maintaining it.&lt;/p&gt;
&lt;h2 id=&quot;vert-x-3-6-tools-for-transaction-management&quot;&gt;Vert.x 3.6 tools for transaction management&lt;/h2&gt;
&lt;p&gt;That is why Vert.x 3.6 will provide &lt;em&gt;&lt;code&gt;Observable&lt;/code&gt; transformers&lt;/em&gt; that can be applied to reactive flows with &lt;a href=&quot;http://reactivex.io/RxJava/javadoc/io/reactivex/Flowable.html#compose-io.reactivex.FlowableTransformer-&quot;&gt;&lt;code&gt;compose&lt;/code&gt;&lt;/a&gt; to make them transactional:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txFlowableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txObservableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txSingleTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txMaybeTransformer&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SQLClientHelper#txCompletableTransformer&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These &lt;em&gt;transformers&lt;/em&gt; wrap the corresponding source of events with SQL transaction management.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;dbClient.rxGetConnection().flatMap(sqlConnection -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES ('The Israelites')&quot;&lt;/span&gt;)
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;).map(ResultSet::getResults))
    .compose(SQLClientHelper.txSingleTransformer(sqlConnection))
    .doFinally(sqlConnection::close);
}).map(rows -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Source &lt;em&gt;transformers&lt;/em&gt; provide maximum flexibility: you are still able to execute operations with the connection after the transaction completes.&lt;/p&gt;
&lt;p&gt;However, you usually do not need the connection after the changes are &lt;em&gt;commited&lt;/em&gt; or &lt;em&gt;rollbacked&lt;/em&gt;.
In this case, you may simply create you source observable with one of the transactional helper methods in &lt;code&gt;io.vertx.reactivex.ext.sql.SQLClientHelper&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Let’s rewrite the previous example:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs java&quot;&gt;SQLClientHelper.inTransactionSingle(client, sqlConnection -&amp;gt; {
  &lt;span class=&quot;hljs-keyword&quot;&gt;return&lt;/span&gt; sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO albums (name) VALUES ('The Israelites')&quot;&lt;/span&gt;)
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Israelites')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxExecute(&lt;span class=&quot;hljs-string&quot;&gt;&quot;INSERT INTO tracks (album, name) VALUES ('The Israelites', 'Too Much Too Soon')&quot;&lt;/span&gt;))
    .andThen(sqlConnection.rxQuery(&lt;span class=&quot;hljs-string&quot;&gt;&quot;SELECT name FROM tracks WHERE album = 'The Israelites'&quot;&lt;/span&gt;).map(ResultSet::getResults))
}).map(rows -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Transform DB rows into a client-friendly JSON object&lt;/span&gt;
}).subscribe(json -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send JSON to the client&lt;/span&gt;
}, t -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// Send error to the client&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;give-it-a-try&quot;&gt;Give it a try&lt;/h2&gt;
&lt;p&gt;Vert.x 3.6 is expected around fall, but the code is already in master and &lt;em&gt;snapshots&lt;/em&gt; are regularly published to Sonatype’s OSS repos.&lt;/p&gt;
&lt;p&gt;So give it a try and feel free to provide your feeback on our user or dev &lt;a href=&quot;https://vertx.io/community&quot;&gt;channels&lt;/a&gt;.&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Mon, 02 Jul 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Christopher Guindon: Eclipse Marketplace Client, Photon Edition not opening in certain cases</title>
	<guid isPermaLink="true">https://www.chrisguindon.com/post/marketplace-client-not-opening-in-photon/</guid>
	<link>https://www.chrisguindon.com/post/marketplace-client-not-opening-in-photon/</link>
	<description>&lt;p&gt;The Eclipse Marketplace Client, Photon edition has a bug where it fails to open in certain cases. If nothing happens when you try to access the Eclipse Marketplace via &lt;strong&gt;“Help &amp;gt; Eclipse Marketplace”&lt;/strong&gt;, please update the Marketplace Client plug-in by doing the following:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;Marketplace Client not opening in Photon&quot; src=&quot;https://www.chrisguindon.com/images/06-marketplace/mpc-update.png&quot; title=&quot;Marketplace Client not opening in Photon&quot; /&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to Help &amp;gt; Install New Software&lt;/li&gt;
&lt;li&gt;Paste the Marketplace Client update site url into the “Work with” field: &lt;strong&gt;&lt;a href=&quot;http://download.eclipse.org/mpc/photon&quot;&gt;http://download.eclipse.org/mpc/photon&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Select the “EPP Marketplace Client” checkbox&lt;/li&gt;
&lt;li&gt;Follow the wizard and restart your Eclipse to finish the installation.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are working on providing an update to the Eclipse Photon release to distribute the fix through automatic updates and package downloads. In the meantime, please update manually if you are affected by this bug.&lt;/p&gt;

&lt;p&gt;If you have any questions about this update process, please send an email to &lt;a href=&quot;mailto:mpc-dev@eclipse.org&quot;&gt;mpc-dev@eclipse.org&lt;/a&gt;. For more technical details, see &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=536385&quot;&gt;bug 536385&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Blog post co-authored with &lt;a href=&quot;https://www.eclipse.org/user/creckord&quot;&gt;Carsten Reckord&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Fri, 29 Jun 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Tanja Obradovic: Jakarta EE, Eclipse MicroProfile and Cloud-Native at EclipseCon France</title>
	<guid isPermaLink="false">https://blogs.eclipse.org/6631 at https://blogs.eclipse.org</guid>
	<link>https://blogs.eclipse.org/post/tanja-obradovic/jakarta-ee-eclipse-microprofile-and-cloud-native-eclipsecon-france</link>
	<description>&lt;div class=&quot;field field-name-body field-type-text-with-summary field-label-hidden&quot;&gt;&lt;div class=&quot;field-items&quot;&gt;&lt;div class=&quot;field-item even&quot;&gt;&lt;p dir=&quot;ltr&quot;&gt;These are exciting times for the Java community! &lt;a href=&quot;https://www.eclipsecon.org/france2018/&quot;&gt;EclipseCon France (ECF) 2018&lt;/a&gt;, the first ECF since Oracle contributed Java EE to Eclipse Foundation, surely reflected that. The Jakarta EE brand, now firmly accepted by the community,  received heightened visibility at ECF via a track dedicated to Jakarta EE and related technologies. The &lt;strong&gt;MicroServices, MicroProfile, EE4J, &amp;amp; Java EE&lt;/strong&gt; track included talks  related to cloud native application development using the MicroProfile programming model, EE4J and Jakarta EE (Java EE) technologies. Topics included: how to build a fault tolerant microservice, how to monitor and trace the service invocations, how to secure microservices, best practices, and more.  Based on session attendance and community feedback it is clear interest in Jakarta EE, MicroProfile and Microservices is high and growing.&lt;/p&gt;

&lt;p&gt;The talks varied from a beginner to advanced level and were given by well known Java developers, open source project committers and community leaders. It was a fabulous opportunity to meet Java enthusiasts seeking community involvement and looking forward to contributing to the success of Jakarta EE for Cloud application development.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Here are some highlights from talks and presentations.&lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;Cloud-Native Application Development&lt;/h2&gt;

&lt;p dir=&quot;ltr&quot;&gt;(based on &lt;a href=&quot;https://www.eclipsecon.org/france2018/sites/default/files/slides/PathToCNAD-EC-France-Session-June-2018.pdf&quot;&gt;RedHat presentation&lt;/a&gt;, Thomas Qvarnstrom, Cesar Saavedra)&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;In the case you are wondering what exactly is cloud-native application development, please refer to the great presentation from RedHat. It will give you answers on what changes are required from &lt;em&gt;development &lt;/em&gt;and &lt;em&gt;deployment &lt;/em&gt;perspective. This also means you’ll get pointers for architectural and organizational changes needed when developing cloud-native applications.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;As we know “a picture tells a thousand words”, so here is the slide from the presentation that describes it all&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/nativeappdev_0.png&quot; style=&quot;height: 215px; width: 400px;&quot; /&gt;  &lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Development assumes &lt;strong&gt;Service-based architecture&lt;/strong&gt; with &lt;strong&gt;API-driven communication&lt;/strong&gt;&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Deployment is done using &lt;strong&gt;containers infrastructure&lt;/strong&gt; and &lt;strong&gt;DevOps process&lt;/strong&gt; (continuous integration and ongoing deployment, tight collaboration between teams)  &lt;/div&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;If you are wondering how different are Traditional from Cloud-Native Application Development is, again, one of the slides from the same presentation sums it up.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/TradVsCloud-Native_1.png&quot; style=&quot;height: 197px; width: 400px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;And finally, if you would like to develop cloud native applications here are steps you need to follow&lt;/p&gt;

&lt;ol&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Evolve Cloud Native DevOps practices and culture (take advantage of new tech, faster approaches and tighter collaboration)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Speed up existing applications (migrate app server to container-based platform)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Use Application Services optimized for cloud and containers&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Choose right tool for right task - Multiple runtimes and frameworks&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Self-Service On-Demand Infra (allow developers to access infra when they need it with IT Ops control &amp;amp; visibility)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Automate it to accelerate delivery (Integrated full-scale enterprise-wide automation)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Implement Continuous Delivery, Integration and Deployment (CD/CI) - to provide updates w/o operational capacity &amp;amp; reduced risk&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Evolve a more modular architecture - Microservices Architecture and its alternatives&lt;/div&gt;
	&lt;/li&gt;
&lt;/ol&gt;

&lt;div dir=&quot;ltr&quot;&gt;Eclipse MicroProfile&lt;/div&gt;

&lt;p&gt;(Based on &lt;a href=&quot;https://www.eclipsecon.org/france2018/session/eclipse-microprofile-new-and-noteworthy&quot;&gt;MicroProfile presentation&lt;/a&gt;, Ivar Grimstad)&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Enterprise Java technologies like Java EE have evolved for nearly two decades to support distributed application architectures. The MicroProfile is the next step in that evolution and it is optimizing Enterprise Java for a microservices architecture.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Eclipse MicroProfile is an open-source community specification for Enterprise Java microservices, that is engaging individuals, organizations, and vendors collaborating within an open source (Eclipse Foundation) project.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The slide below shows how MicroProfile (an early release) relates to Java EE.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/microprofile_javaee_0.png&quot; style=&quot;height: 193px; width: 400px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Popularity and expansion of the profile in last two years (since the first release Sept 2016) is gaining a major momentum in the Java community. MicroProfile since then evolved and the current release Eclipse MicroProfile 2.0 specification looks like this&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/microprofil20_0.png&quot; style=&quot;height: 267px; width: 400px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Who are MicroProfile implementers?&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;&lt;img src=&quot;https://blogs.eclipse.org/sites/default/files/users/user180/microprofilimpl_0.png&quot; style=&quot;height: 169px; width: 400px;&quot; /&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;h2 dir=&quot;ltr&quot;&gt;Jakarta EE&lt;/h2&gt;

&lt;p&gt;(based on &lt;a href=&quot;https://www.eclipsecon.org/france2018/sites/default/files/slides/Jakarta%20EE.pdf&quot;&gt;IBM presentation&lt;/a&gt;, Kevin Sutter)&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;This talk provided a great overview of the status of the EE4J project set up to evolve the Java EE technologies contributed by Oracle to the Eclipse Foundation into the Jakarta EE platform.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;The following material is being moved from Oracle to the Eclipse Foundation&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Java EE 8 Specifications&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Java EE 8 APIs&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Java EE 8 RIs&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Java EE 8 TCKs&lt;/div&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;Progress on the code move to Eclipse Foundation can be viewed  &lt;a href=&quot;https://www.eclipse.org/ee4j/status.php&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first Jakarta EE release is expected late 2018. The first Jakarta EE release will be equivalent to Java EE 8 platform.&lt;/p&gt;

&lt;p&gt;There are additional changes taking place as well! Here are some of the highlights:&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Oracle’s Java Community Process (JCP) [for Java EE only] is in going to be changed by the Jakarta EE Working Group.&lt;/p&gt;

&lt;div class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;Key Benefits of the Jakarta EE Working Group&lt;/div&gt;

&lt;ul dir=&quot;ltr&quot;&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;Vendor Neutral&lt;/li&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;Open Intellectual Property Flows&lt;/li&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;More Agile and Flexible&lt;/li&gt;
&lt;/ul&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;Specification development approach change&lt;/p&gt;

&lt;ul dir=&quot;ltr&quot;&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;JCP specification development was based on specification development first, then code based on the specification&lt;/li&gt;
	&lt;li class=&quot;rteindent1&quot;&gt;Jakarta EE Working Group is proposing the reverse - Code development first and, then specification based on the code…&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;Oracle’s Java Specification Request (JSR) will be replaced by Eclipse Foundation Specification Process&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Currently being defined by the Jakarta EE Specification Committee&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Covers many aspects–Specifications, APIs, Implementations, TCKs, Licensing, and Branding&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;&lt;a href=&quot;https://accounts.eclipse.org/mailing-list/jakarta.ee-spec&quot;&gt;https://accounts.eclipse.org/mailing-list/jakarta.ee-spec&lt;/a&gt;&lt;/div&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;Eclipse Foundation Licensing&lt;/p&gt;

&lt;ul&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Usage License (EPL v2*)&lt;/div&gt;
	&lt;/li&gt;
	&lt;li dir=&quot;ltr&quot;&gt;
	&lt;div dir=&quot;ltr&quot;&gt;Specs, APIs, RIs, and TCKs!&lt;/div&gt;
	&lt;/li&gt;
&lt;/ul&gt;

&lt;p dir=&quot;ltr&quot;&gt;MicroProfile and Java EE&lt;/p&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;MicroProfile1.4 (Java EE 7)&lt;/p&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;• Config 1.3 • Fault Tolerance 1.1 • JWT 1.1 • OpenTracing 1.1 • Rest Client 1.1&lt;/p&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;MicroProfile2.0 (Java EE 8)&lt;/p&gt;

&lt;p class=&quot;rteindent1&quot; dir=&quot;ltr&quot;&gt;• CDI 2.0 • JAX-RS 2.1 • JSON-P1.1 • JSON-B1.0 • (Common Annotations 1.3)&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;There is a lot of enthusiasam about revitalizing and modernizing the old Java EE specification and JCP process. It is refreshing to see the excitement and interset about the work already done, and furthermore the work being laid out for Jakarta EE - the cornerstone Cloud-native Application Development, as continuation of the success Java EE, once had in (monolithic) on-premise application development.&lt;/p&gt;

&lt;p dir=&quot;ltr&quot;&gt;Lastly, much thanks to all community members and our sponsors that made the event extremely memorable and possible.  Looking forward to seeing many of you at EclipseCon Europe. See you all very soon. Shout out to Emily Jiang, IBM, chair of the MicroServices, MicroProfile, EE4J, &amp;amp; Java EE track and all the session contributors.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Thu, 28 Jun 2018 19:59:50 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus’s Photonic 4.0!</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=1106</guid>
	<link>https://papyrusuml.wordpress.com/2018/06/28/papyruss-photonic-4-0/</link>
	<description>&lt;p&gt;It had to happen: &lt;strong&gt;Papyrus is now available at version 4.0&lt;/strong&gt;! That’s Papyrus “Photon” for those of you who follow the Eclipse release names.&lt;/p&gt;
&lt;p&gt;Curious about what was done in this release? You can find that in the &lt;a href=&quot;https://projects.eclipse.org/projects/modeling.mdt.papyrus/releases/4.0.0/bugs&quot;&gt;list of addressed issues&lt;/a&gt; (a.k.a., the bug list). The following topics are addressed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A new preference has been introduced to keep stereotype application with their base element see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/StereotypeApplication_Preference&quot;&gt;StereotypeApplication Preference&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The hyperlink navigation has changed see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/Hyperlink_Navigation&quot;&gt;Hyperlink Navigation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add a preference page to configure the visualization of  external decorator  see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/External_Decorator&quot;&gt;External Decorator&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add auto-completion to select the type in the property view see  &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/Auto_complete_type&quot;&gt;Auto complete type&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Add an export to HTML to see model without papyrus see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/HTML_Export&quot;&gt;HTML Export&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Development and adaptation of the Layer tool for the diagrams &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Oxygen_Work_Description/NewFeature/Layers&quot;&gt;Layers&lt;/a&gt; .&lt;/li&gt;
&lt;li&gt;Synchronization with ELK see &lt;a href=&quot;https://wiki.eclipse.org/Papyrus/Photon_Work_Description/Usability/ELK&quot;&gt;ELK adaptation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Tables improvements:
&lt;ul&gt;
&lt;li&gt;display of a string instead of N/A&lt;/li&gt;
&lt;li&gt;Matrix improvements&lt;/li&gt;
&lt;li&gt;save by UUID not the positon&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Diagrams improvements:
&lt;ul&gt;
&lt;li&gt;some problems about the name label of ports have been fixed&lt;/li&gt;
&lt;li&gt;some resize action in the class diagram have been fixed.&lt;/li&gt;
&lt;li&gt;sequence diagram – Better movement  management of Elements, introduction of combined fragment, RCPTT tests.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt; Integrate a  tool to adapt your model based on the modification of the profile&lt;/li&gt;
&lt;li&gt;Architecture framework : stabilization (easier customizations/modifications by the users) and bug corrections&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Want to try it out? Here are a few links to help you:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://download.eclipse.org/modeling/mdt/papyrus/updates/releases/photon/&quot;&gt;Update site&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.eclipse.org/papyrus/download.html#rcp&quot;&gt;RCP &lt;/a&gt;(With the “RCP*”, you can just download and run!)&lt;/li&gt;
&lt;li&gt;And of course you could stil use the &lt;a href=&quot;https://www.eclipse.org/downloads/eclipse-packages/index.php&quot;&gt;Eclipse Installer&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;em&gt;(* In case you were wondering, “RCP” stands for “Rich Client Platform &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/em&gt;&lt;/p&gt;</description>
	<pubDate>Thu, 28 Jun 2018 19:18:00 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Take Your Code to the Next Level With Eclipse Photon</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/mbSb135JP7Y/take-your-code-next-level-eclipse-photon</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/mbSb135JP7Y/take-your-code-next-level-eclipse-photon</link>
	<description>Join over 4 million active users of the Eclipse IDE and take your coding to the next level with Eclipse Photon.&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/mbSb135JP7Y&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Thu, 28 Jun 2018 17:00:00 +0000</pubDate>
</item>

</channel>
</rss>
